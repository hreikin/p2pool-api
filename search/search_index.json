{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P2Pool API","text":"<p><code>P2Pool-API</code> is a Python module that enables seamless interaction with the P2Pool API, offering a range of features designed to enhance usability, flexibility, and reliability. Detailed documentation is available here, and can also be built locally if needed.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with <code>P2Pool-API</code>, visit the Usage page for a quick installation and usage guide. For an in-depth overview of the module\u2019s capabilities, consult the reference pages available at the documentation site.  </p> <p>For more examples, visit the Examples page. Additionally, you can refer to the Logging section for details on how to enable and configure logging.</p>"},{"location":"#features","title":"Features","text":"<p><code>P2Pool-API</code> includes several powerful features:</p> <ul> <li>Data Persistence: Store and manage p2pool data in a database to ensure resilience and prevent data loss during API or p2pool restarts.</li> <li>Getting Started Examples: Practical examples to help new users quickly understand and use the tool.</li> <li>Reference Documentation: Detailed documentation to guide you through all features and functions.  </li> <li>Logging: Configurable logging for better debugging and monitoring.</li> <li>Custom Exceptions: Specific exceptions for handling API errors, connection errors, and database errors.</li> <li>Data Caching: Retrieve and cache various properties and statistics from P2Pool's API responses.</li> <li>Database Operations: Insert and delete p2pool-related data in the database.</li> <li>Enhanced Data Persistence: Improved database support with more detailed data storage and retrieval options.</li> <li>Test Coverage: A basic test suite for enhanced reliability and easier development.</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>Performance Optimization: Enhancements to improve the performance and efficiency of the module.</li> <li>Improved Error Handling: More robust error handling and recovery mechanisms.</li> <li>Comprehensive Test Coverage: A more robust test suite for enhanced reliability and easier development.</li> </ul> <p>These features make <code>P2Pool-API</code> an ideal solution for both miners and developers seeking a user-friendly and robust tool.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are both encouraged and greatly appreciated, more information can be found on the Contributing page.</p>"},{"location":"#donations","title":"Donations","text":"<p>If you find <code>P2Pool-API</code> useful and would like to support its development, consider sending a donation in XMR to the following address:  </p> <p><code>49ipjnJgoRnPsX8v5LVzUvfpSou6agomvKZnqD8zqFVqG6aqeUvKPyJ4WXhodiBPSvAuPNEmhF5QSiaJ59ZgFKwq9bXzCjz</code> </p> <p>Your support is greatly appreciated!</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>Contributions are both encouraged and greatly appreciated.</p> <p>To contribute content, fork this repo and make a pull request to the master branch including your changes.</p> <ul> <li>On GitHub, fork the p2pool-api repo</li> <li>Clone your newly created repo. (Note: replace your-username with your GitHub username)</li> </ul> <p>via ssh:</p> <pre><code>git clone git@github.com:your-username/p2pool-api\n</code></pre> <p>via https:</p> <pre><code>git clone https://github.com/your-username/p2pool-api\n</code></pre> <ul> <li>Navigate to the repo and create a new topic branch</li> </ul> <pre><code>cd p2pool-api\ngit checkout -b foobar\n</code></pre> <ul> <li>After making modifications, commit and push your changes to your topic branch</li> <li>Open a PR against the p2pool-api main branch</li> </ul>"},{"location":"CONTRIBUTING/#run-the-documentation-server-locally","title":"Run the documentation server locally","text":"<p>This documentation can be built and run locally.</p> <ul> <li>The build process for mkdocs utilizes Python</li> <li>It is recommended to install python pip dependencies inside of a Virtual Environment (venv)</li> </ul> <p>Note: You may need to first install <code>python3-venv</code> or the equivalent for your distribution</p> <ul> <li>Navigate to your <code>p2pool-api</code> repo</li> <li>Create the python virtual environment</li> </ul> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <ul> <li>Install mkdocs dependencies to the venv</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre> <ul> <li>Run the documentation server locally</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>View your changes at http://localhost:8000</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This page provides detailed examples of how to use the <code>p2pool</code> API. Each example demonstrates a specific functionality. </p>"},{"location":"examples/#examples-list","title":"Examples List","text":"<ol> <li>Add P2Pool</li> <li>Update All Endpoints</li> <li>Update Individual Endpoints</li> <li>Access Properties</li> <li>Full Example</li> </ol>"},{"location":"examples/#add-p2pool","title":"Add P2Pool","text":"<p>This example demonstrates how to initialize the P2PoolAPI object. </p> add_p2pool.py<pre><code>from env import log\nfrom p2pool import P2PoolAPI\n\napi_path = \"api/\"               # Can also be a URL: api_path = \"http://example.com/api/\"\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)         # If using a URL: x = P2PoolAPI(api_path, is_remote=True)\nlog.info(\"P2PoolAPI initialized.\")\n</code></pre>"},{"location":"examples/#update-all-endpoints","title":"Update All Endpoints","text":"<p>This example demonstrates how to update all endpoints. </p> update_all_endpoints.py<pre><code>from env import log, api_path\nfrom p2pool import P2PoolAPI\n\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)\nlog.info(\"P2PoolAPI initialized.\")\nlog.info(\"Updating all endpoints.\")\nx.update_all_endpoints()\nlog.info(\"All endpoints updated.\")\n</code></pre>"},{"location":"examples/#update-individual-endpoints","title":"Update Individual Endpoints","text":"<p>This example demonstrates how to update individual endpoints. </p> update_individual_endpoints.py<pre><code>from env import log, api_path\nfrom p2pool import P2PoolAPI\n\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)\nlog.info(\"P2PoolAPI initialized.\")\nlog.info(\"Updating all individual endpoints.\")\nx.update_local_console()\nx.update_local_p2p()\nx.update_local_stratum()\nx.update_network_stats()\nx.update_pool_blocks()\nx.update_pool_stats()\nx.update_stats_mod()\nlog.info(\"All individual endpoints updated.\")\n</code></pre>"},{"location":"examples/#access-properties","title":"Access Properties","text":"<p>This example demonstrates how to access properties. </p> access_properties.py<pre><code>from env import log, api_path\nfrom p2pool import P2PoolAPI\n\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)\nlog.info(\"P2PoolAPI initialized.\")\nlog.info(\"Full JSON response examples:\")\nlog.info(f\"`local/console` endpoint: {x.local_console}\")\nlog.info(f\"`local/p2p` endpoint: {x.local_p2p}\")\nlog.info(f\"`local/stratum` endpoint: {x.local_stratum}\")\nlog.info(\"Individual data examples:\")\nlog.info(f\"`uptime` from `local/p2p` endpoint: {x.local_p2p_uptime}\")\nlog.info(f\"`heights` from `pool/blocks` endpoint: {x.pool_blocks_heights}\")\nlog.info(f\"`ports` from `stats/mod` endpoint: {x.stats_mod_ports}\")\n</code></pre>"},{"location":"examples/#full-example","title":"Full Example","text":"<p>This example demonstrates a full example. </p> full_example.py<pre><code>from env import log, api_path\nfrom p2pool import P2PoolAPI\n\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)\nlog.info(\"P2PoolAPI initialized.\")\nlog.info(\"Updating all individual endpoints.\")\nx.update_local_console()\nx.update_local_p2p()\nx.update_local_stratum()\nx.update_network_stats()\nx.update_pool_blocks()\nx.update_pool_stats()\nx.update_stats_mod()\nlog.info(\"All individual endpoints updated.\")\nlog.info(\"Updating all endpoints.\")\nx.update_all_endpoints()\nlog.info(\"All endpoints updated.\")\nlog.info(\"Full JSON response examples:\")\nlog.info(f\"`local/console` endpoint: {x.local_console}\")\nlog.info(f\"`local/p2p` endpoint: {x.local_p2p}\")\nlog.info(f\"`local/stratum` endpoint: {x.local_stratum}\")\nlog.info(\"Individual data examples:\")\nlog.info(f\"`uptime` from `local/p2p` endpoint: {x.local_p2p_uptime}\")\nlog.info(f\"`heights` from `pool/blocks` endpoint: {x.pool_blocks_heights}\")\nlog.info(f\"`ports` from `stats/mod` endpoint: {x.stats_mod_ports}\")\n</code></pre>"},{"location":"logger/","title":"Logging","text":"<p>To enable logging within your project and get detailed information from the P2Pool-API library, you can configure the logging module in your Python script. Here is an example of how to set up logging:</p> <pre><code>import logging\n\n# Configure the logging\nlogging.basicConfig(\n    level=logging.INFO,  # Set the log level for the entire application, change to DEBUG to print all responses.\n    format='[%(asctime)s - %(name)s] - %(levelname)s - %(message)s',  # Consistent format\n    handlers=[\n        logging.FileHandler(\"app.log\"),  # Log to a file\n        logging.StreamHandler()  # Log to console\n    ]\n)\n\nlog = logging.getLogger(\"MyLogger\")\n\nfrom p2pool import P2PoolAPI\n\napi_path = \"api/\"               # Can also be a URL: api_path = \"http://example.com/api/\"\nlog.info(f\"Initializing P2PoolAPI with path: {api_path}\")\nx = P2PoolAPI(api_path)         # If using a URL: x = P2PoolAPI(api_path, is_remote=True)\nlog.info(\"P2PoolAPI initialized.\")\n</code></pre> <p>This configuration will output detailed debug information to the console, including timestamps, logger names, log levels, and log messages.</p>"},{"location":"properties/","title":"Properties","text":"<p>Many properties have been created to enable you to access any data from any of the endpoint responses. The properties will first check the cache and if the cache is not available for any reason it will fallback to the database, if the property isn't available in either it will return the string \"N/A\". A list of all properties can be found below.</p>"},{"location":"properties/#properties-list","title":"Properties List","text":"<ul> <li><code>local_console</code></li> <li><code>local_p2p</code></li> <li><code>local_stratum</code></li> <li><code>network_stats</code></li> <li><code>pool_blocks</code></li> <li><code>pool_stats</code></li> <li><code>stats_mod</code></li> <li><code>local_console_mode</code></li> <li><code>local_console_tcp_port</code></li> <li><code>local_p2p_connections</code></li> <li><code>local_p2p_incoming_connections</code></li> <li><code>local_p2p_peer_list_size</code></li> <li><code>local_p2p_peers</code></li> <li><code>local_p2p_uptime</code></li> <li><code>local_stratum_hashrate_15m</code></li> <li><code>local_stratum_hashrate_1h</code></li> <li><code>local_stratum_hashrate_24h</code></li> <li><code>local_stratum_total_hashes</code></li> <li><code>local_stratum_shares_found</code></li> <li><code>local_stratum_shares_failed</code></li> <li><code>local_stratum_average_effort</code></li> <li><code>local_stratum_current_effort</code></li> <li><code>local_stratum_connections</code></li> <li><code>local_stratum_incoming_connections</code></li> <li><code>local_stratum_block_reward_share_percent</code></li> <li><code>local_stratum_workers_full</code></li> <li><code>local_stratum_workers_short</code></li> <li><code>network_stats_difficulty</code></li> <li><code>network_stats_hash</code></li> <li><code>network_stats_height</code></li> <li><code>network_stats_reward</code></li> <li><code>network_stats_timestamp</code></li> <li><code>pool_blocks_heights</code></li> <li><code>pool_blocks_hashes</code></li> <li><code>pool_blocks_difficulties</code></li> <li><code>pool_blocks_total_hashes</code></li> <li><code>pool_blocks_timestamps</code></li> <li><code>pool_stats_pool_list</code></li> <li><code>pool_stats_payout_type</code></li> <li><code>pool_stats_pool_statistics</code></li> <li><code>pool_stats_hashrate</code></li> <li><code>pool_stats_miners</code></li> <li><code>pool_stats_total_hashes</code></li> <li><code>pool_stats_last_block_found_time</code></li> <li><code>pool_stats_last_block_found</code></li> <li><code>pool_stats_total_blocks_found</code></li> <li><code>pool_stats_pplns_weight</code></li> <li><code>pool_stats_pplns_window_size</code></li> <li><code>pool_stats_sidechain_difficulty</code></li> <li><code>pool_stats_sidechain_height</code></li> <li><code>stats_mod_config</code></li> <li><code>stats_mod_ports</code></li> <li><code>stats_mod_port_values</code></li> <li><code>stats_mod_tls</code></li> <li><code>stats_mod_fee</code></li> <li><code>stats_mod_min_payment_threshold</code></li> <li><code>stats_mod_network</code></li> <li><code>stats_mod_network_height</code></li> <li><code>stats_mod_pool</code></li> <li><code>stats_mod_pool_stats</code></li> <li><code>stats_mod_last_block_found</code></li> <li><code>stats_mod_blocks</code></li> <li><code>stats_mod_miners</code></li> <li><code>stats_mod_hashrate</code></li> <li><code>stats_mod_round_hashes</code></li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>The module can be installed from PyPi or Github with pip:</p> <pre><code>pip install p2pool-api\n# or to install from the Github repository\npip install p2pool-api@git+https://github.com/hreikin/p2pool-api.git@main\n</code></pre>"},{"location":"usage/#usage","title":"Usage","text":"<p>API data is updated on initialization and can be updated individually or altogether using the relevant methods. Data is also available as properties to allow accessing the cached endpoint data all at once or as individual items.</p> <pre><code>import logging\nfrom p2pool import P2PoolAPI\n\n# Configure the root logger\nlogging.basicConfig(\n    level=logging.INFO,  # Set the log level for the entire application, change to DEBUG to print all responses.\n    format='[%(asctime)s - %(name)s] - %(levelname)s - %(message)s',  # Consistent format\n    handlers=[\n        logging.FileHandler(\"app.log\"),  # Log to a file\n        logging.StreamHandler()  # Log to console\n    ]\n)\nlog = logging.getLogger(\"MyLOG\")\n\napi_path = \"api/\"               # Can also be a URL: api_path = \"http://example.com/api/\"\nx = P2PoolAPI(api_path)         # If using a URL: x = P2PoolAPI(api_path, is_remote=True)\n\nx.update_stats_mod()            # Update individual `stats_mod` endpoint\nx.update_all_endpoints()        # Update all endpoints at once\nlog.info(x.local_stratum)       # Log entire response\nlog.info(x.local_p2p_uptime)    # Log property representing individual data from the API\n</code></pre>"},{"location":"reference/classes/api/","title":"P2PoolAPI","text":"<p>A class for interacting with P2Pool miner API data sources.</p> <p>Attributes:</p> Name Type Description <code>_local_console</code> <code>dict</code> <p>Data retrieved from the <code>local/console</code> API endpoint.</p> <code>_local_p2p</code> <code>dict</code> <p>Data retrieved from the <code>local/p2p</code> API endpoint.</p> <code>_local_stratum</code> <code>dict</code> <p>Data retrieved from the <code>local/stratum</code> API endpoint.</p> <code>_network_stats</code> <code>dict</code> <p>Data retrieved from the <code>network/stats</code> API endpoint.</p> <code>_pool_blocks</code> <code>dict</code> <p>Data retrieved from the <code>pool/blocks</code> API endpoint.</p> <code>_pool_stats</code> <code>dict</code> <p>Data retrieved from the <code>pool/stats</code> API endpoint.</p> <code>_stats_mod</code> <code>dict</code> <p>Data retrieved from the <code>stats_mod</code> API endpoint.</p> Source code in <code>p2pool/api.py</code> <pre><code>class P2PoolAPI:\n    \"\"\"\n    A class for interacting with P2Pool miner API data sources.\n\n    Attributes:\n        _local_console (dict): Data retrieved from the `local/console` API endpoint.\n        _local_p2p (dict): Data retrieved from the `local/p2p` API endpoint.\n        _local_stratum (dict): Data retrieved from the `local/stratum` API endpoint.\n        _network_stats (dict): Data retrieved from the `network/stats` API endpoint.\n        _pool_blocks (dict): Data retrieved from the `pool/blocks` API endpoint.\n        _pool_stats (dict): Data retrieved from the `pool/stats` API endpoint.\n        _stats_mod (dict): Data retrieved from the `stats_mod` API endpoint.\n    \"\"\"\n\n    def __init__(self, api_path: str, is_remote: bool = False, db_url: str = \"sqlite:///p2pool.db\"):\n        \"\"\"\n        Initializes a P2PoolAPI instance.\n\n        Args:\n            api_path (str): The base path to the API data directory or URL.\n            is_remote (bool): Indicates if the API path is a remote URL.\n            db_url (str): The URL to the database to store the fetched data.\n        \"\"\"\n        self._api_path = Path(api_path).resolve() if not is_remote else api_path\n        self._is_remote = is_remote\n        self._db_url = db_url\n        self._local_console_cache = {}\n        self._local_p2p_cache = {}\n        self._local_stratum_cache = {}\n        self._workers_full_cache = {}\n        self._workers_cache = {}\n        self._network_stats_cache = {}\n        self._pool_blocks_cache = []\n        self._pool_stats_cache = {}\n        self._stats_mod_cache = {}\n        if not self._validate_api_path(self._api_path, is_remote):\n            raise ValueError(\"Invalid API path provided.\")\n        if self._db_url is not None:\n            P2PoolDatabase._init_db(self._db_url)\n        self.update_all_endpoints()\n\n    def _validate_api_path(self, api_path: str, is_remote: bool) -&gt; bool:\n        \"\"\"\n        Validates the provided API path.\n\n        Args:\n            api_path (str): The API path to validate.\n            is_remote (bool): Indicates if the API path is a remote URL.\n\n        Returns:\n            bool: True if the API path is valid, False otherwise.\n        \"\"\"\n        if is_remote:\n            # Validate URL\n            parsed_url = urlparse(api_path)\n            return all([parsed_url.scheme, parsed_url.netloc])\n        else:\n            # Validate local file path\n            return Path(api_path).exists()\n\n    def _fetch_data(self, endpoint: str) -&gt; dict | bool:\n        \"\"\"\n        Fetches data from the specified endpoint.\n\n        Args:\n            endpoint (str): The endpoint to fetch data from.\n\n        Returns:\n            dict | bool: The fetched data, or False if an error occurred.\n        \"\"\"\n        try:\n            if self._is_remote:\n                response = requests.get(f\"{self._api_path}/{endpoint}\")\n                response.raise_for_status()\n                return response.json()\n            else:\n                with open(f\"{self._api_path}/{endpoint}\", \"r\") as reader:\n                    return json.loads(reader.read())\n        except requests.exceptions.RequestException as e:\n            log.error(f\"An error occurred fetching data from `{endpoint}`: {e}\")\n            return False\n        except (OSError, json.JSONDecodeError) as e:\n            log.error(f\"An error occurred reading data from `{endpoint}`: {e}\")\n            return False\n\n    def _get_data_from_cache(self, cache: dict | list, keys: list, table_name: str, selection: str) -&gt; Any:\n        \"\"\"\n        Retrieve data from a nested dictionary cache using a list of keys.\n\n        Args:\n            cache (dict | list): The cache dictionary to retrieve data from.\n            keys (list): A list of keys to traverse the nested dictionary.\n            table_name (str): The name of the table to retrieve data from.\n            selection (str): The column to select from the table.\n\n        Returns:\n            Any: The retrieved data if the keys exist, otherwise \"N/A\".\n\n        Raises:\n            KeyError: If any key in the list of keys is not found in the cache.\n        \"\"\"\n        data = \"N/A\"\n        try:\n            data = cache\n            if len(keys) &gt; 0:\n                for key in keys:\n                    data = data[key]\n            return data\n        except Exception as e:\n            log.error(f\"An error occurred fetching data from cache, trying database: {e}\")\n            raise P2PoolAPIError(e, traceback.format_exc(), f\"An error occurred fetching data from cache: {e}\") from e\n        except P2PoolAPIError as e:\n            return self._fallback_to_db(table_name, selection)\n\n    def _fallback_to_db(self, table_name, selection):\n        \"\"\"\n        Fallback to the database if the data is not available in the cache.\n\n        Args:\n            table_name (str): Name of the table to retrieve data from.\n            selection (str): Column to select from the table.\n\n        Returns:\n            Any: The retrieved data, or a default string value of \"N/A\" if not available.\n        \"\"\"\n        result = P2PoolDatabase.retrieve_data_from_db(self._db_url, table_name, selection)\n        return result[0].get(selection, \"N/A\") if len(result) &gt; 0 else \"N/A\"\n\n    def _get_endpoint(self, endpoint: str) -&gt; bool:\n        \"\"\"\n        Loads data from the specified API endpoint.\n\n        Args:\n            endpoint (str): The API endpoint to fetch data from.\n\n        Returns:\n            bool: True if the operation was successful, False otherwise.\n        \"\"\"\n        cache_attr = f\"_{endpoint.replace('/', '_')}_cache\"\n        data = self._fetch_data(endpoint)\n        if data:\n            setattr(self, cache_attr, data)\n            P2PoolDatabase._insert_data_into_db(data, endpoint, self._db_url)\n            return True\n        return False\n\n    def get_from_db(self, table_name: str, selection: str) -&gt; list:\n        \"\"\"\n        Retrieve data from the database.\n\n        Args:\n            table_name (str): Name of the table to retrieve data from.\n            selection (str): Column to select from the table.\n\n        Returns:\n            list: List of dictionaries containing the retrieved data.\n        \"\"\"\n        return P2PoolDatabase.retrieve_data_from_db(self._db_url, table_name, selection)\n\n    def update_local_console(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from local console endpoint.\n\n        This method sends a request to the \"local/console\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_local_console_endpoint)\n\n    def update_local_p2p(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from local P2P endpoint.\n\n        This method sends a request to the \"local/p2p\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_local_p2p_endpoint)\n\n    def update_local_stratum(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from local stratum endpoint.\n\n        This method sends a request to the \"local/stratum\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_local_stratum_endpoint)\n\n    def update_network_stats(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from network stats endpoint.\n\n        This method sends a request to the \"network/stats\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_network_stats_endpoint)\n\n    def update_pool_blocks(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from pool blocks endpoint.\n\n        This method sends a request to the \"pool/blocks\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_pool_blocks_endpoint)\n\n    def update_pool_stats(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from pool stats endpoint.\n\n        This method sends a request to the \"pool/stats\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_pool_stats_endpoint)\n\n    def update_stats_mod(self) -&gt; bool:\n        \"\"\"\n        Retrieve the data from stats mod endpoint.\n\n        This method sends a request to the \"stats_mod\" endpoint and returns\n        a bool representing the success or failure of the request.\n\n        Returns:\n            bool: The status of the request, True if successful, False otherwise.\n        \"\"\"\n        return self._get_endpoint(_stats_mod_endpoint)\n\n    def update_all_endpoints(self) -&gt; bool:\n        \"\"\"\n        Fetches and processes data from all API endpoints.\n\n        Returns:\n            bool: True if all data sources were successfully fetched, False otherwise.\n        \"\"\"\n        try:\n            update_local_console_success = self.update_local_console()\n            update_local_p2p_success = self.update_local_p2p()\n            update_local_stratum_success = self.update_local_stratum()\n            update_network_stats_success = self.update_network_stats()\n            update_pool_blocks_success = self.update_pool_blocks()\n            update_pool_stats_success = self.update_pool_stats()\n            update_stats_mod_success = self.update_stats_mod()\n            if all([update_local_console_success, update_local_p2p_success, update_local_stratum_success, update_network_stats_success, update_pool_blocks_success, update_pool_stats_success, update_stats_mod_success]):\n                log.info(\"All data fetched successfully.\")\n                return True\n            log.error(\"An error occurred fetching some of the latest data, one or more endpoints failed.\")\n            log.error(f\"update_local_console: {update_local_console_success},\\nupdate_local_p2p: {update_local_p2p_success},\\nupdate_local_stratum: {update_local_stratum_success},\\nupdate_network_stats: {update_network_stats_success},\\nupdate_pool_blocks: {update_pool_blocks_success},\\nupdate_pool_stats: {update_pool_stats_success},\\nupdate_stats_mod: {update_stats_mod_success}\")\n            return False\n        except Exception as e:\n            raise P2PoolAPIError(e, traceback.format_exc(), f\"An error occurred fetching the latest data: {e}\") from e\n\n    @property\n    def local_console(self) -&gt; dict:\n        \"\"\"\n        Returns the local console data.\n\n        Returns:\n            dict: The local console data.\n        \"\"\"\n        return self._get_data_from_cache(self._local_console_cache, [], _local_console_table_name, \"full_json\")\n\n    @property\n    def local_p2p(self) -&gt; dict:\n        \"\"\"\n        Returns the local P2P data.\n\n        Returns:\n            dict: The local P2P data.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [], _local_p2p_table_name, \"full_json\")\n\n    @property\n    def local_stratum(self) -&gt; dict:\n        \"\"\"\n        Returns the local stratum data.\n\n        Returns:\n            dict: The local stratum data.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [], _local_stratum_table_name, \"full_json\")\n\n    @property\n    def network_stats(self) -&gt; dict:\n        \"\"\"\n        Returns the network stats data.\n\n        Returns:\n            dict: The network stats data.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [], _network_stats_table_name, \"full_json\")\n\n    @property\n    def pool_blocks(self) -&gt; dict:\n        \"\"\"\n        Returns the pool blocks data.\n\n        Returns:\n            dict: The pool blocks data.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n\n    @property\n    def pool_stats(self) -&gt; dict:\n        \"\"\"\n        Returns the pool stats data.\n\n        Returns:\n            dict: The pool stats data.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [], _pool_stats_table_name, \"full_json\")\n\n    @property\n    def stats_mod(self) -&gt; dict:\n        \"\"\"\n        Returns the stats mod data.\n\n        Returns:\n            dict: The stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [], _stats_mod_table_name, \"full_json\")\n\n    @property\n    def local_console_mode(self) -&gt; str:\n        \"\"\"\n        Returns the local console mode.\n\n        Returns:\n            str: The local console mode.\n        \"\"\"\n        return self._get_data_from_cache(self._local_console_cache, [\"mode\"], _local_console_table_name, \"mode\")\n\n    @property\n    def local_console_tcp_port(self) -&gt; int:\n        \"\"\"\n        Returns the local console TCP port.\n\n        Returns:\n            int: The local console TCP port.\n        \"\"\"\n        return self._get_data_from_cache(self._local_console_cache, [\"tcp_port\"], _local_console_table_name, \"tcp_port\")\n\n    @property\n    def local_p2p_connections(self) -&gt; int:\n        \"\"\"\n        Returns the number of local P2P connections.\n\n        Returns:\n            int: The number of local P2P connections.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [\"connections\"], _local_p2p_table_name, \"connections\")\n\n    @property\n    def local_p2p_incoming_connections(self) -&gt; int:\n        \"\"\"\n        Returns the number of local P2P incoming connections.\n\n        Returns:\n            int: The number of local P2P incoming connections.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [\"incoming_connections\"], _local_p2p_table_name, \"incoming_connections\")\n\n    @property\n    def local_p2p_peer_list_size(self) -&gt; int:\n        \"\"\"\n        Returns the size of the local P2P peer list.\n\n        Returns:\n            int: The size of the local P2P peer list.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [\"peer_list_size\"], _local_p2p_table_name, \"peer_list_size\")\n\n    @property\n    def local_p2p_peers(self) -&gt; list:\n        \"\"\"\n        Returns the list of local P2P peers.\n\n        Returns:\n            list: The list of local P2P peers.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [\"peers\"], _local_p2p_table_name, \"peers\")\n\n    @property\n    def local_p2p_uptime(self) -&gt; int:\n        \"\"\"\n        Returns the local P2P uptime.\n\n        Returns:\n            int: The local P2P uptime.\n        \"\"\"\n        return self._get_data_from_cache(self._local_p2p_cache, [\"uptime\"], _local_p2p_table_name, \"uptime\")\n\n    @property\n    def local_stratum_hashrate_15m(self) -&gt; int:\n        \"\"\"\n        Returns the local stratum hashrate for the last 15 minutes.\n\n        Returns:\n            int: The local stratum hashrate for the last 15 minutes.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"hashrate_15m\"], _local_stratum_table_name, \"hashrate_15m\")\n\n    @property\n    def local_stratum_hashrate_1h(self) -&gt; int:\n        \"\"\"\n        Returns the local stratum hashrate for the last hour.\n\n        Returns:\n            int: The local stratum hashrate for the last hour.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"hashrate_1h\"], _local_stratum_table_name, \"hashrate_1h\")\n\n    @property\n    def local_stratum_hashrate_24h(self) -&gt; int:\n        \"\"\"\n        Returns the local stratum hashrate for the last 24 hours.\n\n        Returns:\n            int: The local stratum hashrate for the last 24 hours.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"hashrate_24h\"], _local_stratum_table_name, \"hashrate_24h\")\n\n    @property\n    def local_stratum_total_hashes(self) -&gt; int:\n        \"\"\"\n        Returns the total number of hashes for the local stratum.\n\n        Returns:\n            int: The total number of hashes for the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"total_hashes\"], _local_stratum_table_name, \"total_hashes\")\n\n    @property\n    def local_stratum_shares_found(self) -&gt; int:\n        \"\"\"\n        Returns the number of shares found by the local stratum.\n\n        Returns:\n            int: The number of shares found by the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"shares_found\"], _local_stratum_table_name, \"shares_found\")\n\n    @property\n    def local_stratum_shares_failed(self) -&gt; int:\n        \"\"\"\n        Returns the number of shares failed by the local stratum.\n\n        Returns:\n            int: The number of shares failed by the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"shares_failed\"], _local_stratum_table_name, \"shares_failed\")\n\n    @property\n    def local_stratum_average_effort(self) -&gt; int:\n        \"\"\"\n        Returns the average effort of the local stratum.\n\n        Returns:\n            int: The average effort of the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"average_effort\"], _local_stratum_table_name, \"average_effort\")\n\n    @property\n    def local_stratum_current_effort(self) -&gt; int:\n        \"\"\"\n        Returns the current effort of the local stratum.\n\n        Returns:\n            int: The current effort of the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"current_effort\"], _local_stratum_table_name, \"current_effort\")\n\n    @property\n    def local_stratum_connections(self) -&gt; int:\n        \"\"\"\n        Returns the number of connections to the local stratum.\n\n        Returns:\n            int: The number of connections to the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"connections\"], _local_stratum_table_name, \"connections\")\n\n    @property\n    def local_stratum_incoming_connections(self) -&gt; int:\n        \"\"\"\n        Returns the number of incoming connections to the local stratum.\n\n        Returns:\n            int: The number of incoming connections to the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"incoming_connections\"], _local_stratum_table_name, \"incoming_connections\")\n\n    @property\n    def local_stratum_block_reward_share_percent(self) -&gt; int:\n        \"\"\"\n        Returns the block reward share percentage of the local stratum.\n\n        Returns:\n            int: The block reward share percentage of the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"block_reward_share_percent\"], _local_stratum_table_name, \"block_reward_share_percent\")\n\n    @property\n    def local_stratum_workers_full(self) -&gt; list:\n        \"\"\"\n        Returns the full list of workers for the local stratum.\n\n        Returns:\n            list: The full list of workers for the local stratum.\n        \"\"\"\n        return self._get_data_from_cache(self._local_stratum_cache, [\"workers\"], _local_stratum_table_name, \"workers\")\n\n    @property\n    def local_stratum_workers_short(self) -&gt; list:\n        \"\"\"\n        Returns the list of workers for the local stratum.\n\n        Returns:\n            list: The short list of workers for the local stratum.\n        \"\"\"\n        workers = self._get_data_from_cache(self._local_stratum_cache, [\"workers\"], _local_stratum_table_name, \"workers\")\n        result = [w.split(\",\") for w in workers]\n        return sorted(result, key=lambda x: int(x[3]), reverse=True)\n\n    @property\n    def network_stats_difficulty(self) -&gt; int:\n        \"\"\"\n        Returns the network difficulty.\n\n        Returns:\n            int: The network difficulty.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [\"difficulty\"], _network_stats_table_name, \"difficulty\")\n\n    @property\n    def network_stats_hash(self) -&gt; str:\n        \"\"\"\n        Returns the network hash.\n\n        Returns:\n            str: The network hash.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [\"hash\"], _network_stats_table_name, \"hash_value\")\n\n    @property\n    def network_stats_height(self) -&gt; int:\n        \"\"\"\n        Returns the network height.\n\n        Returns:\n            int: The network height.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [\"height\"], _network_stats_table_name, \"height\")\n\n    @property\n    def network_stats_reward(self) -&gt; int:\n        \"\"\"\n        Returns the network reward.\n\n        Returns:\n            int: The network reward.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [\"reward\"], _network_stats_table_name, \"reward\")\n\n    @property\n    def network_stats_timestamp(self) -&gt; int:\n        \"\"\"\n        Returns the network timestamp.\n\n        Returns:\n            int: The network timestamp.\n        \"\"\"\n        return self._get_data_from_cache(self._network_stats_cache, [\"timestamp\"], _network_stats_table_name, \"timestamp\")\n\n    @property\n    def pool_blocks_heights(self) -&gt; list[int]:\n        \"\"\"\n        Returns the list of pool block heights.\n\n        Returns:\n            list[int]: The list of pool block heights.\n        \"\"\"\n        heights = []\n        try:\n            pool_blocks = self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n            for i in pool_blocks:\n                heights.append(i[\"height\"])\n            return heights\n        except Exception as e:\n            log.error(f\"An error occurred fetching pool block heights: {e}\")\n            return \"N/A\"\n\n    @property\n    def pool_blocks_hashes(self) -&gt; list[str]:\n        \"\"\"\n        Returns the list of pool block hashes.\n\n        Returns:\n            list[str]: The list of pool block hashes.\n        \"\"\"\n        hashes = []\n        try:\n            pool_blocks = self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n            for i in pool_blocks:\n                hashes.append(i[\"hash\"])\n            return hashes\n        except Exception as e:\n            log.error(f\"An error occurred fetching pool block hashes: {e}\")\n            return \"N/A\"\n\n    @property\n    def pool_blocks_difficulties(self) -&gt; list[int]:\n        \"\"\"\n        Returns the list of pool block difficulties.\n\n        Returns:\n            list[int]: The list of pool block difficulties.\n        \"\"\"\n        difficulties = []\n        try:\n            pool_blocks = self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n            for i in pool_blocks:\n                difficulties.append(i[\"difficulty\"])\n            return difficulties\n        except Exception as e:\n            log.error(f\"An error occurred fetching pool block difficulties: {e}\")\n            return \"N/A\"\n\n    @property\n    def pool_blocks_total_hashes(self) -&gt; list[int]:\n        \"\"\"\n        Returns the list of total hashes for pool blocks.\n\n        Returns:\n            list[int]: The list of total hashes for pool blocks.\n        \"\"\"\n        total_hashes = []\n        try:\n            pool_blocks = self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n            for i in pool_blocks:\n                total_hashes.append(i[\"totalHashes\"])\n            return total_hashes\n        except Exception as e:\n            log.error(f\"An error occurred fetching pool block total hashes: {e}\")\n            return \"N/A\"\n\n    @property\n    def pool_blocks_timestamps(self) -&gt; list[int]:\n        \"\"\"\n        Returns the list of timestamps for pool blocks.\n\n        Returns:\n            list[int]: The list of timestamps for pool blocks.\n        \"\"\"\n        timestamps = []\n        try:\n            pool_blocks = self._get_data_from_cache(self._pool_blocks_cache, [], _pool_blocks_table_name, \"full_json\")\n            for i in pool_blocks:\n                timestamps.append(i[\"ts\"])\n            return timestamps\n        except Exception as e:\n            log.error(f\"An error occurred fetching pool block timestamps: {e}\")\n            return \"N/A\"\n\n    @property\n    def pool_stats_pool_list(self) -&gt; list[str]:\n        \"\"\"\n        Returns the pool stats pool list.\n\n        Returns:\n            list[str]: The pool stats pool list.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_list\"], _pool_stats_table_name, \"pool_list\")\n\n    @property\n    def pool_stats_payout_type(self) -&gt; str:\n        \"\"\"\n        Returns the pool stats payout type.\n\n        Returns:\n            str: The pool stats payout type.\n        \"\"\"\n        result = self._get_data_from_cache(self._pool_stats_cache, [\"pool_list\"], _pool_stats_table_name, \"pool_list\")\n        return result[0]\n\n    @property\n    def pool_stats_pool_statistics(self) -&gt; dict:\n        \"\"\"\n        Returns the pool stats pool statistics.\n\n        Returns:\n            dict: The pool stats pool statistics.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\"], _pool_stats_table_name, \"pool_statistics\")\n\n    @property\n    def pool_stats_hashrate(self) -&gt; int:\n        \"\"\"\n        Returns the pool stats hash rate.\n\n        Returns:\n            int: The pool stats hash rate.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"hashRate\"], _pool_stats_table_name, \"hashrate\")\n\n    @property\n    def pool_stats_miners(self) -&gt; int:\n        \"\"\"\n        Returns the number of miners in the pool stats.\n\n        Returns:\n            int: The number of miners in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"miners\"], _pool_stats_table_name, \"miners\")\n\n    @property\n    def pool_stats_total_hashes(self) -&gt; int:\n        \"\"\"\n        Returns the total number of hashes in the pool stats.\n\n        Returns:\n            int: The total number of hashes in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"totalHashes\"], _pool_stats_table_name, \"total_hashes\")\n\n    @property\n    def pool_stats_last_block_found_time(self) -&gt; int:\n        \"\"\"\n        Returns the last block found time in the pool stats.\n\n        Returns:\n            int: The last block found time in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"lastBlockFoundTime\"], _pool_stats_table_name, \"last_block_found_time\")\n\n    @property\n    def pool_stats_last_block_found(self) -&gt; int:\n        \"\"\"\n        Returns the last block found in the pool stats.\n\n        Returns:\n            int: The last block found in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"lastBlockFound\"], _pool_stats_table_name, \"last_block_found\")\n\n    @property\n    def pool_stats_total_blocks_found(self) -&gt; int:\n        \"\"\"\n        Returns the total number of blocks found in the pool stats.\n\n        Returns:\n            int: The total number of blocks found in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"totalBlocksFound\"], _pool_stats_table_name, \"total_blocks_found\")\n\n    @property\n    def pool_stats_pplns_weight(self) -&gt; int:\n        \"\"\"\n        Returns the PPLNS weight in the pool stats.\n\n        Returns:\n            int: The PPLNS weight in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"pplnsWeight\"], _pool_stats_table_name, \"pplns_weight\")\n\n    @property\n    def pool_stats_pplns_window_size(self) -&gt; int:\n        \"\"\"\n        Returns the PPLNS window size in the pool stats.\n\n        Returns:\n            int: The PPLNS window size in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"pplnsWindowSize\"], _pool_stats_table_name, \"pplns_window_size\")\n\n    @property\n    def pool_stats_sidechain_difficulty(self) -&gt; int:\n        \"\"\"\n        Returns the sidechain difficulty in the pool stats.\n\n        Returns:\n            int: The sidechain difficulty in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"sidechainDifficulty\"], _pool_stats_table_name, \"sidechain_difficulty\")\n\n    @property\n    def pool_stats_sidechain_height(self) -&gt; int:\n        \"\"\"\n        Returns the sidechain height in the pool stats.\n\n        Returns:\n            int: The sidechain height in the pool stats.\n        \"\"\"\n        return self._get_data_from_cache(self._pool_stats_cache, [\"pool_statistics\", \"sidechainHeight\"], _pool_stats_table_name, \"sidechain_height\")\n\n    @property\n    def stats_mod_config(self) -&gt; dict:\n        \"\"\"\n        Returns the stats mod config.\n\n        Returns:\n            dict: The stats mod config.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"config\"], _stats_mod_table_name, \"config\")\n\n    @property\n    def stats_mod_ports(self) -&gt; list[dict]:\n        \"\"\"\n        Returns the list of ports in the stats mod config.\n\n        Returns:\n            list[dict]: The list of ports in the stats mod config.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"config\", \"ports\"], _stats_mod_table_name, \"ports\")\n\n    @property\n    def stats_mod_port_values(self) -&gt; list[int]:\n        \"\"\"\n        Returns the list of ports in the stats mod config.\n\n        Returns:\n            list[int]: The list of ports in the stats mod config.\n        \"\"\"\n        ports = []\n        try:\n            config_ports = self._get_data_from_cache(self._stats_mod_cache, [\"config\", \"ports\"], _stats_mod_table_name, \"ports\")\n            for i in config_ports:\n                ports.append(i[\"port\"])\n            return ports\n        except Exception as e:\n            log.error(f\"An error occurred fetching stats mod port values: {e}\")\n            return \"N/A\"\n\n    @property\n    def stats_mod_tls(self) -&gt; list[bool]:\n        \"\"\"\n        Returns the list of TLS settings in the stats mod config.\n\n        Returns:\n            list[bool]: The list of TLS settings in the stats mod config.\n        \"\"\"\n        tls = []\n        try:\n            config_ports = self._get_data_from_cache(self._stats_mod_cache, [\"config\", \"ports\"], _stats_mod_table_name, \"ports\")\n            for i in config_ports:\n                tls.append(i[\"tls\"])\n            return tls\n        except Exception as e:\n            log.error(f\"An error occurred fetching stats mod TLS settings: {e}\")\n            return \"N/A\"\n\n    @property\n    def stats_mod_fee(self) -&gt; int:\n        \"\"\"\n        Returns the fee in the stats mod config.\n\n        Returns:\n            int: The fee in the stats mod config.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"config\", \"fee\"], _stats_mod_table_name, \"fee\")\n\n    @property\n    def stats_mod_min_payment_threshold(self) -&gt; int:\n        \"\"\"\n        Returns the minimum payment threshold in the stats mod config.\n\n        Returns:\n            int: The minimum payment threshold in the stats mod config.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"config\", \"minPaymentThreshold\"], _stats_mod_table_name, \"min_payment_threshold\")\n\n    @property\n    def stats_mod_network(self) -&gt; dict:\n        \"\"\"\n        Returns the network in the stats mod data.\n\n        Returns:\n            dict: The network in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"network\"], _stats_mod_table_name, \"network\")\n\n    @property\n    def stats_mod_network_height(self) -&gt; int:\n        \"\"\"\n        Returns the network height in the stats mod data.\n\n        Returns:\n            int: The network height in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"network\", \"height\"], _stats_mod_table_name, \"height\")\n\n    @property\n    def stats_mod_pool(self) -&gt; dict:\n        \"\"\"\n        Returns the pool in the stats mod data.\n\n        Returns:\n            dict: The pool in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\"], _stats_mod_table_name, \"pool\")\n\n    @property\n    def stats_mod_pool_stats(self) -&gt; dict:\n        \"\"\"\n        Returns the pool stats in the stats mod data.\n\n        Returns:\n            dict: The pool stats in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"stats\"], _stats_mod_table_name, \"stats\")\n\n    @property\n    def stats_mod_last_block_found(self) -&gt; str:\n        \"\"\"\n        Returns the last block found in the stats mod data.\n\n        Returns:\n            str: The last block found in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"stats\", \"lastBlockFound\"], _stats_mod_table_name, \"last_block_found\")\n\n    @property\n    def stats_mod_blocks(self) -&gt; list:\n        \"\"\"\n        Returns the list of blocks in the stats mod data.\n\n        Returns:\n            list: The list of blocks in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"blocks\"], _stats_mod_table_name, \"blocks\")\n\n    @property\n    def stats_mod_miners(self) -&gt; int:\n        \"\"\"\n        Returns the number of miners in the stats mod data.\n\n        Returns:\n            int: The number of miners in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"miners\"], _stats_mod_table_name, \"miners\")\n\n    @property\n    def stats_mod_hashrate(self) -&gt; int:\n        \"\"\"\n        Returns the hashrate in the stats mod data.\n\n        Returns:\n            int: The hashrate in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"hashrate\"], _stats_mod_table_name, \"hashrate\")\n\n    @property\n    def stats_mod_round_hashes(self) -&gt; int:\n        \"\"\"\n        Returns the round hashes in the stats mod data.\n\n        Returns:\n            int: The round hashes in the stats mod data.\n        \"\"\"\n        return self._get_data_from_cache(self._stats_mod_cache, [\"pool\", \"roundHashes\"], _stats_mod_table_name, \"round_hashes\")\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_console","title":"<code>local_console</code>  <code>property</code>","text":"<p>Returns the local console data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The local console data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_console_mode","title":"<code>local_console_mode</code>  <code>property</code>","text":"<p>Returns the local console mode.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The local console mode.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_console_tcp_port","title":"<code>local_console_tcp_port</code>  <code>property</code>","text":"<p>Returns the local console TCP port.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The local console TCP port.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p","title":"<code>local_p2p</code>  <code>property</code>","text":"<p>Returns the local P2P data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The local P2P data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p_connections","title":"<code>local_p2p_connections</code>  <code>property</code>","text":"<p>Returns the number of local P2P connections.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of local P2P connections.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p_incoming_connections","title":"<code>local_p2p_incoming_connections</code>  <code>property</code>","text":"<p>Returns the number of local P2P incoming connections.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of local P2P incoming connections.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p_peer_list_size","title":"<code>local_p2p_peer_list_size</code>  <code>property</code>","text":"<p>Returns the size of the local P2P peer list.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The size of the local P2P peer list.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p_peers","title":"<code>local_p2p_peers</code>  <code>property</code>","text":"<p>Returns the list of local P2P peers.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The list of local P2P peers.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_p2p_uptime","title":"<code>local_p2p_uptime</code>  <code>property</code>","text":"<p>Returns the local P2P uptime.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The local P2P uptime.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum","title":"<code>local_stratum</code>  <code>property</code>","text":"<p>Returns the local stratum data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The local stratum data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_average_effort","title":"<code>local_stratum_average_effort</code>  <code>property</code>","text":"<p>Returns the average effort of the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The average effort of the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_block_reward_share_percent","title":"<code>local_stratum_block_reward_share_percent</code>  <code>property</code>","text":"<p>Returns the block reward share percentage of the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The block reward share percentage of the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_connections","title":"<code>local_stratum_connections</code>  <code>property</code>","text":"<p>Returns the number of connections to the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of connections to the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_current_effort","title":"<code>local_stratum_current_effort</code>  <code>property</code>","text":"<p>Returns the current effort of the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The current effort of the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_hashrate_15m","title":"<code>local_stratum_hashrate_15m</code>  <code>property</code>","text":"<p>Returns the local stratum hashrate for the last 15 minutes.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The local stratum hashrate for the last 15 minutes.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_hashrate_1h","title":"<code>local_stratum_hashrate_1h</code>  <code>property</code>","text":"<p>Returns the local stratum hashrate for the last hour.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The local stratum hashrate for the last hour.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_hashrate_24h","title":"<code>local_stratum_hashrate_24h</code>  <code>property</code>","text":"<p>Returns the local stratum hashrate for the last 24 hours.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The local stratum hashrate for the last 24 hours.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_incoming_connections","title":"<code>local_stratum_incoming_connections</code>  <code>property</code>","text":"<p>Returns the number of incoming connections to the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of incoming connections to the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_shares_failed","title":"<code>local_stratum_shares_failed</code>  <code>property</code>","text":"<p>Returns the number of shares failed by the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of shares failed by the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_shares_found","title":"<code>local_stratum_shares_found</code>  <code>property</code>","text":"<p>Returns the number of shares found by the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of shares found by the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_total_hashes","title":"<code>local_stratum_total_hashes</code>  <code>property</code>","text":"<p>Returns the total number of hashes for the local stratum.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The total number of hashes for the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_workers_full","title":"<code>local_stratum_workers_full</code>  <code>property</code>","text":"<p>Returns the full list of workers for the local stratum.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The full list of workers for the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.local_stratum_workers_short","title":"<code>local_stratum_workers_short</code>  <code>property</code>","text":"<p>Returns the list of workers for the local stratum.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The short list of workers for the local stratum.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats","title":"<code>network_stats</code>  <code>property</code>","text":"<p>Returns the network stats data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The network stats data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats_difficulty","title":"<code>network_stats_difficulty</code>  <code>property</code>","text":"<p>Returns the network difficulty.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The network difficulty.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats_hash","title":"<code>network_stats_hash</code>  <code>property</code>","text":"<p>Returns the network hash.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The network hash.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats_height","title":"<code>network_stats_height</code>  <code>property</code>","text":"<p>Returns the network height.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The network height.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats_reward","title":"<code>network_stats_reward</code>  <code>property</code>","text":"<p>Returns the network reward.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The network reward.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.network_stats_timestamp","title":"<code>network_stats_timestamp</code>  <code>property</code>","text":"<p>Returns the network timestamp.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The network timestamp.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks","title":"<code>pool_blocks</code>  <code>property</code>","text":"<p>Returns the pool blocks data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The pool blocks data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks_difficulties","title":"<code>pool_blocks_difficulties</code>  <code>property</code>","text":"<p>Returns the list of pool block difficulties.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The list of pool block difficulties.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks_hashes","title":"<code>pool_blocks_hashes</code>  <code>property</code>","text":"<p>Returns the list of pool block hashes.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The list of pool block hashes.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks_heights","title":"<code>pool_blocks_heights</code>  <code>property</code>","text":"<p>Returns the list of pool block heights.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The list of pool block heights.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks_timestamps","title":"<code>pool_blocks_timestamps</code>  <code>property</code>","text":"<p>Returns the list of timestamps for pool blocks.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The list of timestamps for pool blocks.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_blocks_total_hashes","title":"<code>pool_blocks_total_hashes</code>  <code>property</code>","text":"<p>Returns the list of total hashes for pool blocks.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The list of total hashes for pool blocks.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats","title":"<code>pool_stats</code>  <code>property</code>","text":"<p>Returns the pool stats data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The pool stats data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_hashrate","title":"<code>pool_stats_hashrate</code>  <code>property</code>","text":"<p>Returns the pool stats hash rate.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The pool stats hash rate.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_last_block_found","title":"<code>pool_stats_last_block_found</code>  <code>property</code>","text":"<p>Returns the last block found in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The last block found in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_last_block_found_time","title":"<code>pool_stats_last_block_found_time</code>  <code>property</code>","text":"<p>Returns the last block found time in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The last block found time in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_miners","title":"<code>pool_stats_miners</code>  <code>property</code>","text":"<p>Returns the number of miners in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of miners in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_payout_type","title":"<code>pool_stats_payout_type</code>  <code>property</code>","text":"<p>Returns the pool stats payout type.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The pool stats payout type.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_pool_list","title":"<code>pool_stats_pool_list</code>  <code>property</code>","text":"<p>Returns the pool stats pool list.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The pool stats pool list.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_pool_statistics","title":"<code>pool_stats_pool_statistics</code>  <code>property</code>","text":"<p>Returns the pool stats pool statistics.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The pool stats pool statistics.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_pplns_weight","title":"<code>pool_stats_pplns_weight</code>  <code>property</code>","text":"<p>Returns the PPLNS weight in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The PPLNS weight in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_pplns_window_size","title":"<code>pool_stats_pplns_window_size</code>  <code>property</code>","text":"<p>Returns the PPLNS window size in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The PPLNS window size in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_sidechain_difficulty","title":"<code>pool_stats_sidechain_difficulty</code>  <code>property</code>","text":"<p>Returns the sidechain difficulty in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The sidechain difficulty in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_sidechain_height","title":"<code>pool_stats_sidechain_height</code>  <code>property</code>","text":"<p>Returns the sidechain height in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The sidechain height in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_total_blocks_found","title":"<code>pool_stats_total_blocks_found</code>  <code>property</code>","text":"<p>Returns the total number of blocks found in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The total number of blocks found in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.pool_stats_total_hashes","title":"<code>pool_stats_total_hashes</code>  <code>property</code>","text":"<p>Returns the total number of hashes in the pool stats.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The total number of hashes in the pool stats.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod","title":"<code>stats_mod</code>  <code>property</code>","text":"<p>Returns the stats mod data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_blocks","title":"<code>stats_mod_blocks</code>  <code>property</code>","text":"<p>Returns the list of blocks in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The list of blocks in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_config","title":"<code>stats_mod_config</code>  <code>property</code>","text":"<p>Returns the stats mod config.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_fee","title":"<code>stats_mod_fee</code>  <code>property</code>","text":"<p>Returns the fee in the stats mod config.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The fee in the stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_hashrate","title":"<code>stats_mod_hashrate</code>  <code>property</code>","text":"<p>Returns the hashrate in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The hashrate in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_last_block_found","title":"<code>stats_mod_last_block_found</code>  <code>property</code>","text":"<p>Returns the last block found in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The last block found in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_min_payment_threshold","title":"<code>stats_mod_min_payment_threshold</code>  <code>property</code>","text":"<p>Returns the minimum payment threshold in the stats mod config.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The minimum payment threshold in the stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_miners","title":"<code>stats_mod_miners</code>  <code>property</code>","text":"<p>Returns the number of miners in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of miners in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_network","title":"<code>stats_mod_network</code>  <code>property</code>","text":"<p>Returns the network in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The network in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_network_height","title":"<code>stats_mod_network_height</code>  <code>property</code>","text":"<p>Returns the network height in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The network height in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_pool","title":"<code>stats_mod_pool</code>  <code>property</code>","text":"<p>Returns the pool in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The pool in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_pool_stats","title":"<code>stats_mod_pool_stats</code>  <code>property</code>","text":"<p>Returns the pool stats in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The pool stats in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_port_values","title":"<code>stats_mod_port_values</code>  <code>property</code>","text":"<p>Returns the list of ports in the stats mod config.</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>list[int]: The list of ports in the stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_ports","title":"<code>stats_mod_ports</code>  <code>property</code>","text":"<p>Returns the list of ports in the stats mod config.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>list[dict]: The list of ports in the stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_round_hashes","title":"<code>stats_mod_round_hashes</code>  <code>property</code>","text":"<p>Returns the round hashes in the stats mod data.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The round hashes in the stats mod data.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.stats_mod_tls","title":"<code>stats_mod_tls</code>  <code>property</code>","text":"<p>Returns the list of TLS settings in the stats mod config.</p> <p>Returns:</p> Type Description <code>list[bool]</code> <p>list[bool]: The list of TLS settings in the stats mod config.</p>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.__init__","title":"<code>__init__(api_path, is_remote=False, db_url='sqlite:///p2pool.db')</code>","text":"<p>Initializes a P2PoolAPI instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_path</code> <code>str</code> <p>The base path to the API data directory or URL.</p> required <code>is_remote</code> <code>bool</code> <p>Indicates if the API path is a remote URL.</p> <code>False</code> <code>db_url</code> <code>str</code> <p>The URL to the database to store the fetched data.</p> <code>'sqlite:///p2pool.db'</code> Source code in <code>p2pool/api.py</code> <pre><code>def __init__(self, api_path: str, is_remote: bool = False, db_url: str = \"sqlite:///p2pool.db\"):\n    \"\"\"\n    Initializes a P2PoolAPI instance.\n\n    Args:\n        api_path (str): The base path to the API data directory or URL.\n        is_remote (bool): Indicates if the API path is a remote URL.\n        db_url (str): The URL to the database to store the fetched data.\n    \"\"\"\n    self._api_path = Path(api_path).resolve() if not is_remote else api_path\n    self._is_remote = is_remote\n    self._db_url = db_url\n    self._local_console_cache = {}\n    self._local_p2p_cache = {}\n    self._local_stratum_cache = {}\n    self._workers_full_cache = {}\n    self._workers_cache = {}\n    self._network_stats_cache = {}\n    self._pool_blocks_cache = []\n    self._pool_stats_cache = {}\n    self._stats_mod_cache = {}\n    if not self._validate_api_path(self._api_path, is_remote):\n        raise ValueError(\"Invalid API path provided.\")\n    if self._db_url is not None:\n        P2PoolDatabase._init_db(self._db_url)\n    self.update_all_endpoints()\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI._fallback_to_db","title":"<code>_fallback_to_db(table_name, selection)</code>","text":"<p>Fallback to the database if the data is not available in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>Column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>The retrieved data, or a default string value of \"N/A\" if not available.</p> Source code in <code>p2pool/api.py</code> <pre><code>def _fallback_to_db(self, table_name, selection):\n    \"\"\"\n    Fallback to the database if the data is not available in the cache.\n\n    Args:\n        table_name (str): Name of the table to retrieve data from.\n        selection (str): Column to select from the table.\n\n    Returns:\n        Any: The retrieved data, or a default string value of \"N/A\" if not available.\n    \"\"\"\n    result = P2PoolDatabase.retrieve_data_from_db(self._db_url, table_name, selection)\n    return result[0].get(selection, \"N/A\") if len(result) &gt; 0 else \"N/A\"\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI._fetch_data","title":"<code>_fetch_data(endpoint)</code>","text":"<p>Fetches data from the specified endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint to fetch data from.</p> required <p>Returns:</p> Type Description <code>dict | bool</code> <p>dict | bool: The fetched data, or False if an error occurred.</p> Source code in <code>p2pool/api.py</code> <pre><code>def _fetch_data(self, endpoint: str) -&gt; dict | bool:\n    \"\"\"\n    Fetches data from the specified endpoint.\n\n    Args:\n        endpoint (str): The endpoint to fetch data from.\n\n    Returns:\n        dict | bool: The fetched data, or False if an error occurred.\n    \"\"\"\n    try:\n        if self._is_remote:\n            response = requests.get(f\"{self._api_path}/{endpoint}\")\n            response.raise_for_status()\n            return response.json()\n        else:\n            with open(f\"{self._api_path}/{endpoint}\", \"r\") as reader:\n                return json.loads(reader.read())\n    except requests.exceptions.RequestException as e:\n        log.error(f\"An error occurred fetching data from `{endpoint}`: {e}\")\n        return False\n    except (OSError, json.JSONDecodeError) as e:\n        log.error(f\"An error occurred reading data from `{endpoint}`: {e}\")\n        return False\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI._get_data_from_cache","title":"<code>_get_data_from_cache(cache, keys, table_name, selection)</code>","text":"<p>Retrieve data from a nested dictionary cache using a list of keys.</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>dict | list</code> <p>The cache dictionary to retrieve data from.</p> required <code>keys</code> <code>list</code> <p>A list of keys to traverse the nested dictionary.</p> required <code>table_name</code> <code>str</code> <p>The name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>The column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The retrieved data if the keys exist, otherwise \"N/A\".</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If any key in the list of keys is not found in the cache.</p> Source code in <code>p2pool/api.py</code> <pre><code>def _get_data_from_cache(self, cache: dict | list, keys: list, table_name: str, selection: str) -&gt; Any:\n    \"\"\"\n    Retrieve data from a nested dictionary cache using a list of keys.\n\n    Args:\n        cache (dict | list): The cache dictionary to retrieve data from.\n        keys (list): A list of keys to traverse the nested dictionary.\n        table_name (str): The name of the table to retrieve data from.\n        selection (str): The column to select from the table.\n\n    Returns:\n        Any: The retrieved data if the keys exist, otherwise \"N/A\".\n\n    Raises:\n        KeyError: If any key in the list of keys is not found in the cache.\n    \"\"\"\n    data = \"N/A\"\n    try:\n        data = cache\n        if len(keys) &gt; 0:\n            for key in keys:\n                data = data[key]\n        return data\n    except Exception as e:\n        log.error(f\"An error occurred fetching data from cache, trying database: {e}\")\n        raise P2PoolAPIError(e, traceback.format_exc(), f\"An error occurred fetching data from cache: {e}\") from e\n    except P2PoolAPIError as e:\n        return self._fallback_to_db(table_name, selection)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI._get_endpoint","title":"<code>_get_endpoint(endpoint)</code>","text":"<p>Loads data from the specified API endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The API endpoint to fetch data from.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the operation was successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def _get_endpoint(self, endpoint: str) -&gt; bool:\n    \"\"\"\n    Loads data from the specified API endpoint.\n\n    Args:\n        endpoint (str): The API endpoint to fetch data from.\n\n    Returns:\n        bool: True if the operation was successful, False otherwise.\n    \"\"\"\n    cache_attr = f\"_{endpoint.replace('/', '_')}_cache\"\n    data = self._fetch_data(endpoint)\n    if data:\n        setattr(self, cache_attr, data)\n        P2PoolDatabase._insert_data_into_db(data, endpoint, self._db_url)\n        return True\n    return False\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI._validate_api_path","title":"<code>_validate_api_path(api_path, is_remote)</code>","text":"<p>Validates the provided API path.</p> <p>Parameters:</p> Name Type Description Default <code>api_path</code> <code>str</code> <p>The API path to validate.</p> required <code>is_remote</code> <code>bool</code> <p>Indicates if the API path is a remote URL.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the API path is valid, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def _validate_api_path(self, api_path: str, is_remote: bool) -&gt; bool:\n    \"\"\"\n    Validates the provided API path.\n\n    Args:\n        api_path (str): The API path to validate.\n        is_remote (bool): Indicates if the API path is a remote URL.\n\n    Returns:\n        bool: True if the API path is valid, False otherwise.\n    \"\"\"\n    if is_remote:\n        # Validate URL\n        parsed_url = urlparse(api_path)\n        return all([parsed_url.scheme, parsed_url.netloc])\n    else:\n        # Validate local file path\n        return Path(api_path).exists()\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.get_from_db","title":"<code>get_from_db(table_name, selection)</code>","text":"<p>Retrieve data from the database.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>Column to select from the table.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>List of dictionaries containing the retrieved data.</p> Source code in <code>p2pool/api.py</code> <pre><code>def get_from_db(self, table_name: str, selection: str) -&gt; list:\n    \"\"\"\n    Retrieve data from the database.\n\n    Args:\n        table_name (str): Name of the table to retrieve data from.\n        selection (str): Column to select from the table.\n\n    Returns:\n        list: List of dictionaries containing the retrieved data.\n    \"\"\"\n    return P2PoolDatabase.retrieve_data_from_db(self._db_url, table_name, selection)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_all_endpoints","title":"<code>update_all_endpoints()</code>","text":"<p>Fetches and processes data from all API endpoints.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if all data sources were successfully fetched, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_all_endpoints(self) -&gt; bool:\n    \"\"\"\n    Fetches and processes data from all API endpoints.\n\n    Returns:\n        bool: True if all data sources were successfully fetched, False otherwise.\n    \"\"\"\n    try:\n        update_local_console_success = self.update_local_console()\n        update_local_p2p_success = self.update_local_p2p()\n        update_local_stratum_success = self.update_local_stratum()\n        update_network_stats_success = self.update_network_stats()\n        update_pool_blocks_success = self.update_pool_blocks()\n        update_pool_stats_success = self.update_pool_stats()\n        update_stats_mod_success = self.update_stats_mod()\n        if all([update_local_console_success, update_local_p2p_success, update_local_stratum_success, update_network_stats_success, update_pool_blocks_success, update_pool_stats_success, update_stats_mod_success]):\n            log.info(\"All data fetched successfully.\")\n            return True\n        log.error(\"An error occurred fetching some of the latest data, one or more endpoints failed.\")\n        log.error(f\"update_local_console: {update_local_console_success},\\nupdate_local_p2p: {update_local_p2p_success},\\nupdate_local_stratum: {update_local_stratum_success},\\nupdate_network_stats: {update_network_stats_success},\\nupdate_pool_blocks: {update_pool_blocks_success},\\nupdate_pool_stats: {update_pool_stats_success},\\nupdate_stats_mod: {update_stats_mod_success}\")\n        return False\n    except Exception as e:\n        raise P2PoolAPIError(e, traceback.format_exc(), f\"An error occurred fetching the latest data: {e}\") from e\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_local_console","title":"<code>update_local_console()</code>","text":"<p>Retrieve the data from local console endpoint.</p> <p>This method sends a request to the \"local/console\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_local_console(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from local console endpoint.\n\n    This method sends a request to the \"local/console\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_local_console_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_local_p2p","title":"<code>update_local_p2p()</code>","text":"<p>Retrieve the data from local P2P endpoint.</p> <p>This method sends a request to the \"local/p2p\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_local_p2p(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from local P2P endpoint.\n\n    This method sends a request to the \"local/p2p\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_local_p2p_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_local_stratum","title":"<code>update_local_stratum()</code>","text":"<p>Retrieve the data from local stratum endpoint.</p> <p>This method sends a request to the \"local/stratum\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_local_stratum(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from local stratum endpoint.\n\n    This method sends a request to the \"local/stratum\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_local_stratum_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_network_stats","title":"<code>update_network_stats()</code>","text":"<p>Retrieve the data from network stats endpoint.</p> <p>This method sends a request to the \"network/stats\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_network_stats(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from network stats endpoint.\n\n    This method sends a request to the \"network/stats\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_network_stats_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_pool_blocks","title":"<code>update_pool_blocks()</code>","text":"<p>Retrieve the data from pool blocks endpoint.</p> <p>This method sends a request to the \"pool/blocks\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_pool_blocks(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from pool blocks endpoint.\n\n    This method sends a request to the \"pool/blocks\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_pool_blocks_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_pool_stats","title":"<code>update_pool_stats()</code>","text":"<p>Retrieve the data from pool stats endpoint.</p> <p>This method sends a request to the \"pool/stats\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_pool_stats(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from pool stats endpoint.\n\n    This method sends a request to the \"pool/stats\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_pool_stats_endpoint)\n</code></pre>"},{"location":"reference/classes/api/#p2pool.api.P2PoolAPI.update_stats_mod","title":"<code>update_stats_mod()</code>","text":"<p>Retrieve the data from stats mod endpoint.</p> <p>This method sends a request to the \"stats_mod\" endpoint and returns a bool representing the success or failure of the request.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The status of the request, True if successful, False otherwise.</p> Source code in <code>p2pool/api.py</code> <pre><code>def update_stats_mod(self) -&gt; bool:\n    \"\"\"\n    Retrieve the data from stats mod endpoint.\n\n    This method sends a request to the \"stats_mod\" endpoint and returns\n    a bool representing the success or failure of the request.\n\n    Returns:\n        bool: The status of the request, True if successful, False otherwise.\n    \"\"\"\n    return self._get_endpoint(_stats_mod_endpoint)\n</code></pre>"},{"location":"reference/classes/db/","title":"P2PoolDatabase","text":"<p>P2Pool Database class.</p> <p>This class provides methods to interact with the P2Pool database.</p> <p>Attributes:</p> Name Type Description <code>_engines</code> <code>dict</code> <p>Dictionary containing the database engines.</p> <code>_table_model_map</code> <code>dict</code> <p>Dictionary mapping table names to ORM model classes.</p> Source code in <code>p2pool/db.py</code> <pre><code>class P2PoolDatabase:\n    \"\"\"\n    P2Pool Database class.\n\n    This class provides methods to interact with the P2Pool database.\n\n    Attributes:\n        _engines (dict): Dictionary containing the database engines.\n        _table_model_map (dict): Dictionary mapping table names to ORM model classes.\n    \"\"\"\n    _engines = {}\n    _table_model_map = {\n        \"console\": Console,\n        \"p2p\": P2P,\n        \"stratum\": Stratum,\n        \"network_stats\": NetworkStats,\n        \"pool_blocks\": PoolBlocks,\n        \"pool_stats\": PoolStats,\n        \"stats_mod\": StatsMod\n    }\n\n    @classmethod\n    def _init_db(cls, db_url):\n        \"\"\"\n        Initializes the database engine, if it already exists, it returns the existing engine.\n\n        Args:\n            db_url (str): Database URL for creating the engine.\n\n        Returns:\n            Engine: SQLAlchemy engine instance.\n\n        Raises:\n            P2PoolDatabaseError: If an error occurs while initializing the database.\n        \"\"\"\n        try:\n            if db_url not in cls._engines:\n                engine = create_engine(db_url)\n                Base.metadata.create_all(engine)\n                cls._engines[db_url] = engine\n            return cls._engines[db_url]\n        except Exception as e:\n            raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred initializing the database:\") from e\n\n    @classmethod\n    def _get_db_session(cls, db_url):\n        \"\"\"\n        Returns a new session for the specified database URL.\n\n        Args:\n            db_url (str): Database URL for creating the session.\n\n        Returns:\n            Session: SQLAlchemy session instance.\n\n        Raises:\n            P2PoolDatabaseError: If the database engine does not exist.\n        \"\"\"\n        try:\n            engine = cls._engines[db_url]\n            Session = sessionmaker(bind=engine)\n            return Session()\n        except KeyError as e:\n            raise P2PoolDatabaseError(e, traceback.format_exc(), f\"Database engine for '{db_url}' does not exist. Please initialize the database first.\") from e\n\n    @classmethod\n    def _insert_data_into_db(cls, json_data, endpoint, db_url):\n        \"\"\"\n        Inserts JSON data into the specified database table.\n\n        Args:\n            json_data (dict | list): JSON data to insert.\n            endpoint (str): Endpoint from which the data is retrieved.\n            db_url (str): Database URL for creating the engine.\n\n        Raises:\n            P2PoolDatabaseError: If an error occurs while inserting data into the database.\n        \"\"\"\n        try:\n            session = cls._get_db_session(db_url)\n            cur_time = datetime.now()\n            if endpoint == _local_console_endpoint:\n                cls._insert_local_console_data(session, json_data, cur_time)\n            elif endpoint == _local_p2p_endpoint:\n                cls._insert_local_p2p_data(session, json_data, cur_time)\n            elif endpoint == _local_stratum_endpoint:\n                cls._insert_local_stratum_data(session, json_data, cur_time)\n            elif endpoint == _network_stats_endpoint:\n                cls._insert_network_stats_data(session, json_data, cur_time)\n            elif endpoint == _pool_blocks_endpoint:\n                cls._insert_pool_blocks_data(session, json_data, cur_time)\n            elif endpoint == _pool_stats_endpoint:\n                cls._insert_pool_stats_data(session, json_data, cur_time)\n            elif endpoint == _stats_mod_endpoint:\n                cls._insert_stats_mod_data(session, json_data, cur_time)\n            session.commit()\n        except Exception as e:\n            session.rollback()\n            raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred inserting data to the database:\") from e\n        finally:\n            session.close()\n\n    @classmethod\n    def _insert_local_console_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts local console endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a Console object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the local console data to.\n            json_data (dict): The JSON data containing the local console information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        local_console = Console(\n            time = cur_time,\n            full_json = json_data,\n            mode = json_data.get(\"mode\"),\n            tcp_port = json_data.get(\"tcp_port\")\n        )\n        session.add(local_console)\n\n    @classmethod\n    def _insert_local_p2p_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts local p2p endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a P2P object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the local p2p data to.\n            json_data (dict): The JSON data containing the local p2p information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        local_p2p = P2P(\n            time = cur_time,\n            full_json = json_data,\n            connections = json_data.get(\"connections\"),\n            incoming_connections = json_data.get(\"incoming_connections\"),\n            peer_list_size = json_data.get(\"peer_list_size\"),\n            peers = json_data.get(\"peers\"),\n            uptime = json_data.get(\"uptime\")\n        )\n        session.add(local_p2p)\n\n    @classmethod\n    def _insert_local_stratum_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts local stratum endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a Stratum object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the local stratum data to.\n            json_data (dict): The JSON data containing the local stratum information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        local_stratum = Stratum(\n            time = cur_time,\n            full_json = json_data,\n            hashrate_15m = json_data.get(\"hashrate_15m\"),\n            hashrate_1h = json_data.get(\"hashrate_1h\"),\n            hashrate_24h = json_data.get(\"hashrate_24h\"),\n            total_hashes = json_data.get(\"total_hashes\"),\n            shares_found = json_data.get(\"shares_found\"),\n            shares_failed = json_data.get(\"shares_failed\"),\n            average_effort = json_data.get(\"average_effort\"),\n            current_effort = json_data.get(\"current_effort\"),\n            connections = json_data.get(\"connections\"),\n            incoming_connections = json_data.get(\"incoming_connections\"),\n            block_reward_share_percent = json_data.get(\"block_reward_share_percent\"),\n            workers = json_data.get(\"workers\")\n        )\n        session.add(local_stratum)\n\n    @classmethod\n    def _insert_network_stats_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts network stats endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a NetworkStats object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the network stats data to.\n            json_data (dict): The JSON data containing the network stats information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        network_stats = NetworkStats(\n            time = cur_time,\n            full_json = json_data,\n            difficulty = json_data.get(\"difficulty\"),\n            hash_value = json_data.get(\"hash\"),\n            height = json_data.get(\"height\"),\n            reward = json_data.get(\"reward\"),\n            timestamp = json_data.get(\"timestamp\")\n        )\n        session.add(network_stats)\n\n    @classmethod\n    def _insert_pool_blocks_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts pool blocks endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a PoolBlocks object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the pool blocks data to.\n            json_data (dict): The JSON data containing the pool blocks information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        pool_blocks = PoolBlocks(\n            time = cur_time,\n            full_json = json_data,\n        )\n        session.add(pool_blocks)\n\n    @classmethod\n    def _insert_pool_stats_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts pool stats endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a PoolStats object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the pool stats data to.\n            json_data (dict): The JSON data containing the pool stats information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        pool_stats = PoolStats(\n            time = cur_time,\n            full_json = json_data,\n            pool_list = json_data.get(\"pool_list\"),\n            pool_statistics = json_data.get(\"pool_statistics\"),\n            hashrate = json_data[\"pool_statistics\"].get(\"hashRate\") if json_data.get(\"pool_statistics\") else None,\n            miners = json_data[\"pool_statistics\"].get(\"miners\") if json_data.get(\"pool_statistics\") else None,\n            total_hashes = json_data[\"pool_statistics\"].get(\"totalHashes\") if json_data.get(\"pool_statistics\") else None,\n            last_block_found_time = json_data[\"pool_statistics\"].get(\"lastBlockFoundTime\") if json_data.get(\"pool_statistics\") else None,\n            last_block_found = json_data[\"pool_statistics\"].get(\"lastBlockFound\") if json_data.get(\"pool_statistics\") else None,\n            total_blocks_found = json_data[\"pool_statistics\"].get(\"totalBlocksFound\") if json_data.get(\"pool_statistics\") else None,\n            pplns_weight = json_data[\"pool_statistics\"].get(\"pplnsWeight\") if json_data.get(\"pool_statistics\") else None,\n            pplns_window_size = json_data[\"pool_statistics\"].get(\"pplnsWindowSize\") if json_data.get(\"pool_statistics\") else None,\n            sidechain_difficulty = json_data[\"pool_statistics\"].get(\"sidechainDifficulty\") if json_data.get(\"pool_statistics\") else None,\n            sidechain_height = json_data[\"pool_statistics\"].get(\"sidechainHeight\") if json_data.get(\"pool_statistics\") else None\n        )\n        session.add(pool_stats)\n\n    @classmethod\n    def _insert_stats_mod_data(cls, session, json_data, cur_time):\n        \"\"\"\n        Inserts stats mod endpoints data into the database.\n\n        This method extracts various pieces of information from the provided JSON data\n        and creates a StatsMod object which is then added to the database session.\n\n        Args:\n            session (Session): The database session to add the stats mod data to.\n            json_data (dict): The JSON data containing the stats mod information.\n            cur_time (datetime): The current timestamp.\n        \"\"\"\n        stats_mod = StatsMod(\n            time = cur_time,\n            full_json = json_data,\n            config = json_data.get(\"config\"),\n            ports = json_data[\"config\"].get(\"ports\") if json_data.get(\"config\") else None,\n            fee = json_data[\"config\"].get(\"fee\") if json_data.get(\"config\") else None,\n            min_payment_threshold = json_data[\"config\"].get(\"minPaymentThreshold\") if json_data.get(\"config\") else None,\n            network = json_data.get(\"network\"),\n            height = json_data[\"network\"].get(\"height\") if json_data.get(\"network\") else None,\n            pool = json_data.get(\"pool\"),\n            stats = json_data[\"pool\"].get(\"stats\") if json_data.get(\"pool\") else None,\n            last_block_found = json_data[\"pool\"][\"stats\"].get(\"lastBlockFound\") if json_data.get(\"pool\") and json_data[\"pool\"].get(\"stats\") else None,\n            blocks = json_data[\"pool\"].get(\"blocks\") if json_data.get(\"pool\") else None,\n            miners = json_data[\"pool\"].get(\"miners\") if json_data.get(\"pool\") else None,\n            hashrate = json_data[\"pool\"].get(\"hashrate\") if json_data.get(\"pool\") else None,\n            round_hashes = json_data[\"pool\"].get(\"roundHashes\") if json_data.get(\"pool\") else None\n        )\n        session.add(stats_mod)\n\n    @classmethod\n    def retrieve_data_from_db(cls, db_url, table_name, selection = \"*\", start_time = None, end_time = None, limit = 1):\n        \"\"\"\n        Retrieves data from the specified database table within the given timeframe.\n\n        Args:\n            db_url (str): Database URL for creating the engine.\n            table_name (str): Name of the table to retrieve data from.\n            selection (str, optional): Column(s) to select from the table. Defaults to \"*\".\n            start_time (datetime, optional): Start time for the data retrieval. Defaults to None.\n            end_time (datetime, optional): End time for the data retrieval. Defaults to None.\n            limit (int, optional): Limit the number of rows retrieved. Defaults to 1.\n\n        Returns:\n            list: List of dictionaries containing the retrieved data or \"N/A\" if no data is found.\n\n        Raises:\n            P2PoolDatabaseError: If an error occurs while retrieving data from the database.\n        \"\"\"\n        data = \"N/A\"\n        try:\n            session = cls._get_db_session(db_url)\n\n            model_class = cls._table_model_map.get(table_name)\n            if not model_class:\n                raise ValueError(f\"Table '{table_name}' does not have a corresponding ORM model class.\")\n\n            # Build the query\n            query = session.query(model_class)\n\n            # Apply selection\n            if selection != \"*\":\n                if isinstance(selection, list):\n                    query = query.with_entities(*[getattr(model_class, col) for col in selection])\n                else:\n                    query = query.with_entities(getattr(model_class, selection))\n\n            # Apply time filters\n            if start_time:\n                query = query.filter(model_class.time &gt;= start_time)\n            if end_time:\n                query = query.filter(model_class.time &lt;= end_time)\n\n            # Apply limit\n            query = query.order_by(model_class.time.desc()).limit(limit)\n\n            # Execute the query and fetch results\n            results = query.all()\n            if results:\n                data = [result._asdict() for result in results]\n            else:\n                data = \"N/A\"\n        except Exception as e:\n            raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred retrieving data from the database:\") from e\n        finally:\n            session.close()\n        return data\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._get_db_session","title":"<code>_get_db_session(db_url)</code>  <code>classmethod</code>","text":"<p>Returns a new session for the specified database URL.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the session.</p> required <p>Returns:</p> Name Type Description <code>Session</code> <p>SQLAlchemy session instance.</p> <p>Raises:</p> Type Description <code>P2PoolDatabaseError</code> <p>If the database engine does not exist.</p> Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _get_db_session(cls, db_url):\n    \"\"\"\n    Returns a new session for the specified database URL.\n\n    Args:\n        db_url (str): Database URL for creating the session.\n\n    Returns:\n        Session: SQLAlchemy session instance.\n\n    Raises:\n        P2PoolDatabaseError: If the database engine does not exist.\n    \"\"\"\n    try:\n        engine = cls._engines[db_url]\n        Session = sessionmaker(bind=engine)\n        return Session()\n    except KeyError as e:\n        raise P2PoolDatabaseError(e, traceback.format_exc(), f\"Database engine for '{db_url}' does not exist. Please initialize the database first.\") from e\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._init_db","title":"<code>_init_db(db_url)</code>  <code>classmethod</code>","text":"<p>Initializes the database engine, if it already exists, it returns the existing engine.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <p>Returns:</p> Name Type Description <code>Engine</code> <p>SQLAlchemy engine instance.</p> <p>Raises:</p> Type Description <code>P2PoolDatabaseError</code> <p>If an error occurs while initializing the database.</p> Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _init_db(cls, db_url):\n    \"\"\"\n    Initializes the database engine, if it already exists, it returns the existing engine.\n\n    Args:\n        db_url (str): Database URL for creating the engine.\n\n    Returns:\n        Engine: SQLAlchemy engine instance.\n\n    Raises:\n        P2PoolDatabaseError: If an error occurs while initializing the database.\n    \"\"\"\n    try:\n        if db_url not in cls._engines:\n            engine = create_engine(db_url)\n            Base.metadata.create_all(engine)\n            cls._engines[db_url] = engine\n        return cls._engines[db_url]\n    except Exception as e:\n        raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred initializing the database:\") from e\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_data_into_db","title":"<code>_insert_data_into_db(json_data, endpoint, db_url)</code>  <code>classmethod</code>","text":"<p>Inserts JSON data into the specified database table.</p> <p>Parameters:</p> Name Type Description Default <code>json_data</code> <code>dict | list</code> <p>JSON data to insert.</p> required <code>endpoint</code> <code>str</code> <p>Endpoint from which the data is retrieved.</p> required <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <p>Raises:</p> Type Description <code>P2PoolDatabaseError</code> <p>If an error occurs while inserting data into the database.</p> Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_data_into_db(cls, json_data, endpoint, db_url):\n    \"\"\"\n    Inserts JSON data into the specified database table.\n\n    Args:\n        json_data (dict | list): JSON data to insert.\n        endpoint (str): Endpoint from which the data is retrieved.\n        db_url (str): Database URL for creating the engine.\n\n    Raises:\n        P2PoolDatabaseError: If an error occurs while inserting data into the database.\n    \"\"\"\n    try:\n        session = cls._get_db_session(db_url)\n        cur_time = datetime.now()\n        if endpoint == _local_console_endpoint:\n            cls._insert_local_console_data(session, json_data, cur_time)\n        elif endpoint == _local_p2p_endpoint:\n            cls._insert_local_p2p_data(session, json_data, cur_time)\n        elif endpoint == _local_stratum_endpoint:\n            cls._insert_local_stratum_data(session, json_data, cur_time)\n        elif endpoint == _network_stats_endpoint:\n            cls._insert_network_stats_data(session, json_data, cur_time)\n        elif endpoint == _pool_blocks_endpoint:\n            cls._insert_pool_blocks_data(session, json_data, cur_time)\n        elif endpoint == _pool_stats_endpoint:\n            cls._insert_pool_stats_data(session, json_data, cur_time)\n        elif endpoint == _stats_mod_endpoint:\n            cls._insert_stats_mod_data(session, json_data, cur_time)\n        session.commit()\n    except Exception as e:\n        session.rollback()\n        raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred inserting data to the database:\") from e\n    finally:\n        session.close()\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_local_console_data","title":"<code>_insert_local_console_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts local console endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a Console object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the local console data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the local console information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_local_console_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts local console endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a Console object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the local console data to.\n        json_data (dict): The JSON data containing the local console information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    local_console = Console(\n        time = cur_time,\n        full_json = json_data,\n        mode = json_data.get(\"mode\"),\n        tcp_port = json_data.get(\"tcp_port\")\n    )\n    session.add(local_console)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_local_p2p_data","title":"<code>_insert_local_p2p_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts local p2p endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a P2P object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the local p2p data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the local p2p information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_local_p2p_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts local p2p endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a P2P object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the local p2p data to.\n        json_data (dict): The JSON data containing the local p2p information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    local_p2p = P2P(\n        time = cur_time,\n        full_json = json_data,\n        connections = json_data.get(\"connections\"),\n        incoming_connections = json_data.get(\"incoming_connections\"),\n        peer_list_size = json_data.get(\"peer_list_size\"),\n        peers = json_data.get(\"peers\"),\n        uptime = json_data.get(\"uptime\")\n    )\n    session.add(local_p2p)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_local_stratum_data","title":"<code>_insert_local_stratum_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts local stratum endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a Stratum object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the local stratum data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the local stratum information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_local_stratum_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts local stratum endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a Stratum object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the local stratum data to.\n        json_data (dict): The JSON data containing the local stratum information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    local_stratum = Stratum(\n        time = cur_time,\n        full_json = json_data,\n        hashrate_15m = json_data.get(\"hashrate_15m\"),\n        hashrate_1h = json_data.get(\"hashrate_1h\"),\n        hashrate_24h = json_data.get(\"hashrate_24h\"),\n        total_hashes = json_data.get(\"total_hashes\"),\n        shares_found = json_data.get(\"shares_found\"),\n        shares_failed = json_data.get(\"shares_failed\"),\n        average_effort = json_data.get(\"average_effort\"),\n        current_effort = json_data.get(\"current_effort\"),\n        connections = json_data.get(\"connections\"),\n        incoming_connections = json_data.get(\"incoming_connections\"),\n        block_reward_share_percent = json_data.get(\"block_reward_share_percent\"),\n        workers = json_data.get(\"workers\")\n    )\n    session.add(local_stratum)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_network_stats_data","title":"<code>_insert_network_stats_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts network stats endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a NetworkStats object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the network stats data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the network stats information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_network_stats_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts network stats endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a NetworkStats object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the network stats data to.\n        json_data (dict): The JSON data containing the network stats information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    network_stats = NetworkStats(\n        time = cur_time,\n        full_json = json_data,\n        difficulty = json_data.get(\"difficulty\"),\n        hash_value = json_data.get(\"hash\"),\n        height = json_data.get(\"height\"),\n        reward = json_data.get(\"reward\"),\n        timestamp = json_data.get(\"timestamp\")\n    )\n    session.add(network_stats)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_pool_blocks_data","title":"<code>_insert_pool_blocks_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts pool blocks endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a PoolBlocks object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the pool blocks data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the pool blocks information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_pool_blocks_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts pool blocks endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a PoolBlocks object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the pool blocks data to.\n        json_data (dict): The JSON data containing the pool blocks information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    pool_blocks = PoolBlocks(\n        time = cur_time,\n        full_json = json_data,\n    )\n    session.add(pool_blocks)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_pool_stats_data","title":"<code>_insert_pool_stats_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts pool stats endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a PoolStats object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the pool stats data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the pool stats information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_pool_stats_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts pool stats endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a PoolStats object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the pool stats data to.\n        json_data (dict): The JSON data containing the pool stats information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    pool_stats = PoolStats(\n        time = cur_time,\n        full_json = json_data,\n        pool_list = json_data.get(\"pool_list\"),\n        pool_statistics = json_data.get(\"pool_statistics\"),\n        hashrate = json_data[\"pool_statistics\"].get(\"hashRate\") if json_data.get(\"pool_statistics\") else None,\n        miners = json_data[\"pool_statistics\"].get(\"miners\") if json_data.get(\"pool_statistics\") else None,\n        total_hashes = json_data[\"pool_statistics\"].get(\"totalHashes\") if json_data.get(\"pool_statistics\") else None,\n        last_block_found_time = json_data[\"pool_statistics\"].get(\"lastBlockFoundTime\") if json_data.get(\"pool_statistics\") else None,\n        last_block_found = json_data[\"pool_statistics\"].get(\"lastBlockFound\") if json_data.get(\"pool_statistics\") else None,\n        total_blocks_found = json_data[\"pool_statistics\"].get(\"totalBlocksFound\") if json_data.get(\"pool_statistics\") else None,\n        pplns_weight = json_data[\"pool_statistics\"].get(\"pplnsWeight\") if json_data.get(\"pool_statistics\") else None,\n        pplns_window_size = json_data[\"pool_statistics\"].get(\"pplnsWindowSize\") if json_data.get(\"pool_statistics\") else None,\n        sidechain_difficulty = json_data[\"pool_statistics\"].get(\"sidechainDifficulty\") if json_data.get(\"pool_statistics\") else None,\n        sidechain_height = json_data[\"pool_statistics\"].get(\"sidechainHeight\") if json_data.get(\"pool_statistics\") else None\n    )\n    session.add(pool_stats)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase._insert_stats_mod_data","title":"<code>_insert_stats_mod_data(session, json_data, cur_time)</code>  <code>classmethod</code>","text":"<p>Inserts stats mod endpoints data into the database.</p> <p>This method extracts various pieces of information from the provided JSON data and creates a StatsMod object which is then added to the database session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The database session to add the stats mod data to.</p> required <code>json_data</code> <code>dict</code> <p>The JSON data containing the stats mod information.</p> required <code>cur_time</code> <code>datetime</code> <p>The current timestamp.</p> required Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef _insert_stats_mod_data(cls, session, json_data, cur_time):\n    \"\"\"\n    Inserts stats mod endpoints data into the database.\n\n    This method extracts various pieces of information from the provided JSON data\n    and creates a StatsMod object which is then added to the database session.\n\n    Args:\n        session (Session): The database session to add the stats mod data to.\n        json_data (dict): The JSON data containing the stats mod information.\n        cur_time (datetime): The current timestamp.\n    \"\"\"\n    stats_mod = StatsMod(\n        time = cur_time,\n        full_json = json_data,\n        config = json_data.get(\"config\"),\n        ports = json_data[\"config\"].get(\"ports\") if json_data.get(\"config\") else None,\n        fee = json_data[\"config\"].get(\"fee\") if json_data.get(\"config\") else None,\n        min_payment_threshold = json_data[\"config\"].get(\"minPaymentThreshold\") if json_data.get(\"config\") else None,\n        network = json_data.get(\"network\"),\n        height = json_data[\"network\"].get(\"height\") if json_data.get(\"network\") else None,\n        pool = json_data.get(\"pool\"),\n        stats = json_data[\"pool\"].get(\"stats\") if json_data.get(\"pool\") else None,\n        last_block_found = json_data[\"pool\"][\"stats\"].get(\"lastBlockFound\") if json_data.get(\"pool\") and json_data[\"pool\"].get(\"stats\") else None,\n        blocks = json_data[\"pool\"].get(\"blocks\") if json_data.get(\"pool\") else None,\n        miners = json_data[\"pool\"].get(\"miners\") if json_data.get(\"pool\") else None,\n        hashrate = json_data[\"pool\"].get(\"hashrate\") if json_data.get(\"pool\") else None,\n        round_hashes = json_data[\"pool\"].get(\"roundHashes\") if json_data.get(\"pool\") else None\n    )\n    session.add(stats_mod)\n</code></pre>"},{"location":"reference/classes/db/#p2pool.db.P2PoolDatabase.retrieve_data_from_db","title":"<code>retrieve_data_from_db(db_url, table_name, selection='*', start_time=None, end_time=None, limit=1)</code>  <code>classmethod</code>","text":"<p>Retrieves data from the specified database table within the given timeframe.</p> <p>Parameters:</p> Name Type Description Default <code>db_url</code> <code>str</code> <p>Database URL for creating the engine.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to retrieve data from.</p> required <code>selection</code> <code>str</code> <p>Column(s) to select from the table. Defaults to \"*\".</p> <code>'*'</code> <code>start_time</code> <code>datetime</code> <p>Start time for the data retrieval. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>End time for the data retrieval. Defaults to None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Limit the number of rows retrieved. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>list</code> <p>List of dictionaries containing the retrieved data or \"N/A\" if no data is found.</p> <p>Raises:</p> Type Description <code>P2PoolDatabaseError</code> <p>If an error occurs while retrieving data from the database.</p> Source code in <code>p2pool/db.py</code> <pre><code>@classmethod\ndef retrieve_data_from_db(cls, db_url, table_name, selection = \"*\", start_time = None, end_time = None, limit = 1):\n    \"\"\"\n    Retrieves data from the specified database table within the given timeframe.\n\n    Args:\n        db_url (str): Database URL for creating the engine.\n        table_name (str): Name of the table to retrieve data from.\n        selection (str, optional): Column(s) to select from the table. Defaults to \"*\".\n        start_time (datetime, optional): Start time for the data retrieval. Defaults to None.\n        end_time (datetime, optional): End time for the data retrieval. Defaults to None.\n        limit (int, optional): Limit the number of rows retrieved. Defaults to 1.\n\n    Returns:\n        list: List of dictionaries containing the retrieved data or \"N/A\" if no data is found.\n\n    Raises:\n        P2PoolDatabaseError: If an error occurs while retrieving data from the database.\n    \"\"\"\n    data = \"N/A\"\n    try:\n        session = cls._get_db_session(db_url)\n\n        model_class = cls._table_model_map.get(table_name)\n        if not model_class:\n            raise ValueError(f\"Table '{table_name}' does not have a corresponding ORM model class.\")\n\n        # Build the query\n        query = session.query(model_class)\n\n        # Apply selection\n        if selection != \"*\":\n            if isinstance(selection, list):\n                query = query.with_entities(*[getattr(model_class, col) for col in selection])\n            else:\n                query = query.with_entities(getattr(model_class, selection))\n\n        # Apply time filters\n        if start_time:\n            query = query.filter(model_class.time &gt;= start_time)\n        if end_time:\n            query = query.filter(model_class.time &lt;= end_time)\n\n        # Apply limit\n        query = query.order_by(model_class.time.desc()).limit(limit)\n\n        # Execute the query and fetch results\n        results = query.all()\n        if results:\n            data = [result._asdict() for result in results]\n        else:\n            data = \"N/A\"\n    except Exception as e:\n        raise P2PoolDatabaseError(e, traceback.format_exc(), f\"An error occurred retrieving data from the database:\") from e\n    finally:\n        session.close()\n    return data\n</code></pre>"},{"location":"reference/exceptions/p2poolapierror/","title":"P2PoolAPIError","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a general error occurs with the P2Pool API.</p> <p>Attributes:</p> Name Type Description <code>error</code> <code>str</code> <p>Specific error message.</p> <code>traceback</code> <code>str</code> <p>Traceback of the error.</p> <code>message</code> <code>str</code> <p>Error message explaining the API issue.</p> Source code in <code>p2pool/exceptions.py</code> <pre><code>class P2PoolAPIError(Exception):\n    \"\"\"\n    Exception raised when a general error occurs with the P2Pool API.\n\n    Attributes:\n        error (str): Specific error message.\n        traceback (str): Traceback of the error.\n        message (str): Error message explaining the API issue.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"An error occurred with the P2Pool API:\"):\n        \"\"\"\n        Initialize the API error.\n\n        Args:\n            error (str, optional): Specific error message. Defaults to None.\n            traceback (str, optional): Traceback of the error. Defaults to None.\n            message (str): Error message explaining the API issue. Defaults to a generic API error message.\n        \"\"\"\n        error_message = f\" {error}\" if error else \"\"\n        traceback_message = f\"\\n{traceback}\" if traceback else \"\"\n        self.message = message + error_message + traceback_message\n        super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/p2poolapierror/#p2pool.exceptions.P2PoolAPIError.__init__","title":"<code>__init__(error=None, traceback=None, message='An error occurred with the P2Pool API:')</code>","text":"<p>Initialize the API error.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>str</code> <p>Specific error message. Defaults to None.</p> <code>None</code> <code>traceback</code> <code>str</code> <p>Traceback of the error. Defaults to None.</p> <code>None</code> <code>message</code> <code>str</code> <p>Error message explaining the API issue. Defaults to a generic API error message.</p> <code>'An error occurred with the P2Pool API:'</code> Source code in <code>p2pool/exceptions.py</code> <pre><code>def __init__(self, error = None, traceback = None, message = \"An error occurred with the P2Pool API:\"):\n    \"\"\"\n    Initialize the API error.\n\n    Args:\n        error (str, optional): Specific error message. Defaults to None.\n        traceback (str, optional): Traceback of the error. Defaults to None.\n        message (str): Error message explaining the API issue. Defaults to a generic API error message.\n    \"\"\"\n    error_message = f\" {error}\" if error else \"\"\n    traceback_message = f\"\\n{traceback}\" if traceback else \"\"\n    self.message = message + error_message + traceback_message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/p2poolconnectionerror/","title":"P2PoolConnectionError","text":"<p>               Bases: <code>P2PoolAPIError</code></p> <p>Exception raised when a connection error occurs with the P2Pool API.</p> Source code in <code>p2pool/exceptions.py</code> <pre><code>class P2PoolConnectionError(P2PoolAPIError):\n    \"\"\"\n    Exception raised when a connection error occurs with the P2Pool API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"Failed to connect to the P2Pool API. Please check the IP, port, and network connection.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/exceptions/p2pooldatabaseerror/","title":"P2PoolDatabaseError","text":"<p>               Bases: <code>P2PoolAPIError</code></p> <p>Exception raised when a database error occurs with the P2Pool API.</p> Source code in <code>p2pool/exceptions.py</code> <pre><code>class P2PoolDatabaseError(P2PoolAPIError):\n    \"\"\"\n    Exception raised when a database error occurs with the P2Pool API.\n    \"\"\"\n    def __init__(self, error = None, traceback = None, message = \"An error occurred with the P2Pool database. Please check the database configuration.\"):\n        super().__init__(error, traceback, message)\n</code></pre>"},{"location":"reference/models/console/","title":"Console","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the local console endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>mode</code> <code>str</code> <p>Mode of the console.</p> <code>tcp_port</code> <code>int</code> <p>TCP port of the console.</p> Source code in <code>p2pool/models.py</code> <pre><code>class Console(Base):\n    \"\"\"\n    ORM model for the local console endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        mode (str): Mode of the console.\n        tcp_port (int): TCP port of the console.\n    \"\"\"\n    __tablename__ = 'console'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    mode = Column(String)\n    tcp_port = Column(Integer)\n</code></pre>"},{"location":"reference/models/networkstats/","title":"NetworkStats","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the network stats endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>difficulty</code> <code>int</code> <p>Network difficulty.</p> <code>hash_value</code> <code>str</code> <p>Network hash value.</p> <code>height</code> <code>int</code> <p>Network height.</p> <code>reward</code> <code>int</code> <p>Network reward.</p> <code>timestamp</code> <code>int</code> <p>Network timestamp.</p> Source code in <code>p2pool/models.py</code> <pre><code>class NetworkStats(Base):\n    \"\"\"\n    ORM model for the network stats endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        difficulty (int): Network difficulty.\n        hash_value (str): Network hash value.\n        height (int): Network height.\n        reward (int): Network reward.\n        timestamp (int): Network timestamp.\n    \"\"\"\n    __tablename__ = 'network_stats'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    difficulty = Column(Integer)\n    hash_value = Column(String)\n    height = Column(Integer)\n    reward = Column(Integer)\n    timestamp = Column(Integer)\n</code></pre>"},{"location":"reference/models/p2p/","title":"P2P","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the local P2P endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>connections</code> <code>int</code> <p>Number of connections.</p> <code>incoming_connections</code> <code>int</code> <p>Number of incoming connections.</p> <code>peer_list_size</code> <code>int</code> <p>Size of the peer list.</p> <code>peers</code> <code>dict</code> <p>List of peers.</p> <code>uptime</code> <code>int</code> <p>Uptime of the P2P connection.</p> Source code in <code>p2pool/models.py</code> <pre><code>class P2P(Base):\n    \"\"\"\n    ORM model for the local P2P endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        connections (int): Number of connections.\n        incoming_connections (int): Number of incoming connections.\n        peer_list_size (int): Size of the peer list.\n        peers (dict): List of peers.\n        uptime (int): Uptime of the P2P connection.\n    \"\"\"\n    __tablename__ = 'p2p'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    connections = Column(Integer)\n    incoming_connections = Column(Integer)\n    peer_list_size = Column(Integer)\n    peers = Column(JSON)\n    uptime = Column(Integer)\n</code></pre>"},{"location":"reference/models/poolblocks/","title":"PoolBlocks","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the pool blocks endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> Source code in <code>p2pool/models.py</code> <pre><code>class PoolBlocks(Base):\n    \"\"\"\n    ORM model for the pool blocks endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n    \"\"\"\n    __tablename__ = 'pool_blocks'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n</code></pre>"},{"location":"reference/models/poolstats/","title":"PoolStats","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the pool stats endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>pool_list</code> <code>dict</code> <p>List of pools.</p> <code>pool_statistics</code> <code>dict</code> <p>Pool statistics.</p> <code>hashrate</code> <code>int</code> <p>Pool hashrate.</p> <code>miners</code> <code>int</code> <p>Number of miners.</p> <code>total_hashes</code> <code>int</code> <p>Total number of hashes.</p> <code>last_block_found_time</code> <code>int</code> <p>Time of the last block found.</p> <code>last_block_found</code> <code>int</code> <p>Last block found.</p> <code>total_blocks_found</code> <code>int</code> <p>Total number of blocks found.</p> <code>pplns_weight</code> <code>int</code> <p>PPLNS weight.</p> <code>pplns_window_size</code> <code>int</code> <p>PPLNS window size.</p> <code>sidechain_difficulty</code> <code>int</code> <p>Sidechain difficulty.</p> <code>sidechain_height</code> <code>int</code> <p>Sidechain height.</p> Source code in <code>p2pool/models.py</code> <pre><code>class PoolStats(Base):\n    \"\"\"\n    ORM model for the pool stats endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        pool_list (dict): List of pools.\n        pool_statistics (dict): Pool statistics.\n        hashrate (int): Pool hashrate.\n        miners (int): Number of miners.\n        total_hashes (int): Total number of hashes.\n        last_block_found_time (int): Time of the last block found.\n        last_block_found (int): Last block found.\n        total_blocks_found (int): Total number of blocks found.\n        pplns_weight (int): PPLNS weight.\n        pplns_window_size (int): PPLNS window size.\n        sidechain_difficulty (int): Sidechain difficulty.\n        sidechain_height (int): Sidechain height.\n    \"\"\"\n    __tablename__ = 'pool_stats'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    pool_list = Column(JSON)\n    pool_statistics = Column(JSON)\n    hashrate = Column(Integer)\n    miners = Column(Integer)\n    total_hashes = Column(Integer)\n    last_block_found_time = Column(Integer)\n    last_block_found = Column(Integer)\n    total_blocks_found = Column(Integer)\n    pplns_weight = Column(Integer)\n    pplns_window_size = Column(Integer)\n    sidechain_difficulty = Column(Integer)\n    sidechain_height = Column(Integer)\n</code></pre>"},{"location":"reference/models/statsmod/","title":"StatsMod","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the stats mod endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>config</code> <code>dict</code> <p>Configuration data.</p> <code>ports</code> <code>dict</code> <p>Ports data.</p> <code>fee</code> <code>int</code> <p>Fee.</p> <code>min_payment_threshold</code> <code>int</code> <p>Minimum payment threshold.</p> <code>network</code> <code>dict</code> <p>Network data.</p> <code>height</code> <code>int</code> <p>Network height.</p> <code>pool</code> <code>dict</code> <p>Pool data.</p> <code>stats</code> <code>dict</code> <p>Stats data.</p> <code>last_block_found</code> <code>str</code> <p>Last block found.</p> <code>blocks</code> <code>dict</code> <p>Blocks data.</p> <code>miners</code> <code>int</code> <p>Number of miners.</p> <code>hashrate</code> <code>int</code> <p>Hashrate.</p> <code>round_hashes</code> <code>int</code> <p>Round hashes.</p> Source code in <code>p2pool/models.py</code> <pre><code>class StatsMod(Base):\n    \"\"\"\n    ORM model for the stats mod endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        config (dict): Configuration data.\n        ports (dict): Ports data.\n        fee (int): Fee.\n        min_payment_threshold (int): Minimum payment threshold.\n        network (dict): Network data.\n        height (int): Network height.\n        pool (dict): Pool data.\n        stats (dict): Stats data.\n        last_block_found (str): Last block found.\n        blocks (dict): Blocks data.\n        miners (int): Number of miners.\n        hashrate (int): Hashrate.\n        round_hashes (int): Round hashes.\n    \"\"\"\n    __tablename__ = 'stats_mod'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    config = Column(JSON)\n    ports = Column(JSON)\n    fee = Column(Integer)\n    min_payment_threshold = Column(Integer)\n    network = Column(JSON)\n    height = Column(Integer)\n    pool = Column(JSON)\n    stats = Column(JSON)\n    last_block_found = Column(String)\n    blocks = Column(JSON)\n    miners = Column(Integer)\n    hashrate = Column(Integer)\n    round_hashes = Column(Integer)\n</code></pre>"},{"location":"reference/models/stratum/","title":"Stratum","text":"<p>               Bases: <code>Base</code></p> <p>ORM model for the local stratum endpoint.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>int</code> <p>Primary key.</p> <code>time</code> <code>datetime</code> <p>Timestamp of the record.</p> <code>full_json</code> <code>dict</code> <p>Full JSON data.</p> <code>hashrate_15m</code> <code>int</code> <p>Hashrate for the last 15 minutes.</p> <code>hashrate_1h</code> <code>int</code> <p>Hashrate for the last hour.</p> <code>hashrate_24h</code> <code>int</code> <p>Hashrate for the last 24 hours.</p> <code>total_hashes</code> <code>int</code> <p>Total number of hashes.</p> <code>shares_found</code> <code>int</code> <p>Number of shares found.</p> <code>shares_failed</code> <code>int</code> <p>Number of shares failed.</p> <code>average_effort</code> <code>float</code> <p>Average effort.</p> <code>current_effort</code> <code>float</code> <p>Current effort.</p> <code>connections</code> <code>int</code> <p>Number of connections.</p> <code>incoming_connections</code> <code>int</code> <p>Number of incoming connections.</p> <code>block_reward_share_percent</code> <code>float</code> <p>Block reward share percentage.</p> <code>workers</code> <code>dict</code> <p>List of workers.</p> Source code in <code>p2pool/models.py</code> <pre><code>class Stratum(Base):\n    \"\"\"\n    ORM model for the local stratum endpoint.\n\n    Attributes:\n        uid (int): Primary key.\n        time (datetime): Timestamp of the record.\n        full_json (dict): Full JSON data.\n        hashrate_15m (int): Hashrate for the last 15 minutes.\n        hashrate_1h (int): Hashrate for the last hour.\n        hashrate_24h (int): Hashrate for the last 24 hours.\n        total_hashes (int): Total number of hashes.\n        shares_found (int): Number of shares found.\n        shares_failed (int): Number of shares failed.\n        average_effort (float): Average effort.\n        current_effort (float): Current effort.\n        connections (int): Number of connections.\n        incoming_connections (int): Number of incoming connections.\n        block_reward_share_percent (float): Block reward share percentage.\n        workers (dict): List of workers.\n    \"\"\"\n    __tablename__ = 'stratum'\n    uid = Column(Integer, primary_key=True)\n    time = Column(DateTime, default=datetime.now)\n    full_json = Column(JSON)\n    hashrate_15m = Column(Integer)\n    hashrate_1h = Column(Integer)\n    hashrate_24h = Column(Integer)\n    total_hashes = Column(Integer)\n    shares_found = Column(Integer)\n    shares_failed = Column(Integer)\n    average_effort = Column(Float)\n    current_effort = Column(Float)\n    connections = Column(Integer)\n    incoming_connections = Column(Integer)\n    block_reward_share_percent = Column(Float)\n    workers = Column(JSON)\n</code></pre>"}]}